## join

## join이란

---

- [ ]  두 개 이상의 table들에 있는 데이터를 한번에 조회하는 것
- 암시적 조인
- 명시적 조인

## 암시적 조인(implicit join)

---

<aside>
🤔 다른 테이블의 컬럼을 사용함으로써 조인을 하는 방식
⇒ 1992년에 폐기된 표현방법이지만 아직 문법적 지원은 하고 있는 상태다.

</aside>

- FROM절에는 TABLE만 나열하고 WHERE절에 JOIN조건을 명시하는 방식

- [ ]  ID가 1인 임직원이 속한 부서 이름은?
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/145daf16-03a6-4837-8ad1-824e04fcb85d/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1af0734d-04f2-4736-862d-6a7f8a661654/Untitled.png)
    

## 명시적 조인(explicit join)

---

<aside>
🤔 FROM절에 join키워드와 함께 joined table들을 명시하는 방식
FROM절에서 ON뒤에 join condition이 명시된다.

</aside>

- 가독성이 좋다.
- 복잡한 join쿼리 작성 중에도 실수할 가능성이 적다.

## INNER JOIN

---

<aside>
🤔 두 TABLE에서 JOIN조건을 만족하는 TUPLE들로 RESULT TABLE을 만드는 JOIN
# FROM table1 [INNER] JOIN table2 ON join_condition

</aside>

- join condition에 사용가능한 연산자 : 비교연산자(= , < , >  ≠ …)
- join condition에서 NULL값을 가지는 tuple은 result table에 포함되지 못한다.
- JOIN명령어의 기본값은 INNER JOIN이다

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0c5846a9-197e-48df-866e-615b1d59b8e6/Untitled.png)

⇒ 결과를 한번 보자! (SIMON의 결과가 없음을 알 수 있다)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/79207f1b-821a-4967-9a66-4df8ccc27a6b/Untitled.png)

⇒ null값을 가지는 tuple은 포함될 수 없다. NULL과 비교연산을 하면 UNKNOWN이 되기떄문에 inner조건에서true값이 반환되지 않아서 결과가 빠지게 된다.

## OUTER JOIN

---

<aside>
🤔 두 table에서 join condition을 만족하지 않는 tuple들도 result table에 포함하는 join
* LEFT JOIN
* RIGHT JOIN
* FULL JOIN

</aside>

- LEFT JOIN
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3128f4f6-6b2b-4f4b-9841-285b973eaec3/Untitled.png)
    
    ⇒ 조회결과가 어떻게 될까? ( SIMON이 포함되게 된다. 하지만 LEFT OUTER조인이라 D.NAME에 HR은 누락이 되게 된다.)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/476de8c8-5b07-4188-9c57-8438cf9e4f22/Untitled.png)
    
- RIGHT JOIN

## three-valued logic(NULL값에 대한 처리)

- [ ]  SQL에서 NULL의 의미
    - 모르는 값( unknown)
    - 이용불가능한 값( 민감정보 unavailable)
    - 적용 불가능한 값( 폰번호 저장하려하는데 집에 폰이 없다 not applicable)
    

## IS NULL

---

- [ ]  employee테이블에서 birth_date값이 NULL인 컬럼 조회하는 법
    - SELECT id FROM employee WHRE birth_date = NULL ;
        
        XXXXXXXXX이러면 안된다!! XXXXXXXXXX
        
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0bde1505-5d93-42d2-984f-704fb6884c85/Untitled.png)
    

## SQL에서 NULL과 비교연산을 하게되면 결과는?

---

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/386a23dc-b0a3-45a5-b3e2-14e8dd1d4e53/Untitled.png)

⇒ UNKNOWN이라고 한다. 왜냐하면 NULL은 값을 아직 모르는거지 내가 원하는 값일 수도 있기 때문이다. 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0da944e2-e5ac-4872-a014-c15aa3eeb906/Untitled.png)

## WHERE 절의 조건에서의 NULL
    
    <aside>
    🤔 JOIN 조건에 의하여 매칭된 튜플들 뿐만 아니라, 매칭되지 못한 RIGHT TABLE의 모든 튜플들도 가지고 온다.
    
    </aside>
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ec819ca4-161c-418f-a0f4-ef19101b8265/Untitled.png)
    
    ⇒ 조회결과를 보면 RIGHT OUTER JOIN은 D.NAME에서 HR이 조회 결과에 포함됨을 알 수 있다.하지만 SIMON은 누락된다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/aa30977c-6bda-47db-b1fc-a49fea70ed32/Untitled.png)
    

## USING

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c075ada2-be30-4e2a-ad73-72d0fb83355d/Untitled.png)

## NOT IN 사용시 값 중 하나가 NULL이라면?

---

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bedb8aea-96e2-46c3-b6a7-4d6f22b1d26e/Untitled.png)

⇒ 하단 예제 참고

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9c1d98a5-10c0-49a8-8dd9-e44d569531ef/Untitled.png)

⇒ 3≠1 AND 3≠2 AND 3≠ NULL

(TRUE)    (TRUE)   (UNKWNON)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2677eee9-3cbf-4624-aad0-286b60a89c5d/Untitled.png)

⇒ 여기서 2000년생들을 조회하는데 값들 중에서 NULL값이 있다면, NOT IN이 UNKNOWN이 된다. 그러나 WHERE절은 TRUE만 출력하기 때문에 아무런 결과가 뜨지 않게 된다!!!

***해결방법***

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1bc9515b-520e-47be-9038-05cb15776fa8/Untitled.png)

⇒ 에초에 SELECT한 E.dept_id를 not null로 제약을 걸어버리거나, 조건에 AND를 통해 IS NOT NULL처리를 해준다.

## order by , 집계함수 , group by

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6a050c2f-f401-4b35-92f8-9e1f6e939d2f/Untitled.png)

## order by

---

<aside>
🤔 조회 결과를 특정 애트리뷰트 기준으로 정렬하여 가져오고 싶을 때 사용, default는 오름차순

</aside>

- ASC ( 오름차순 )
- DESC ( 내림차순 )
- [ ]  임직원들의 정보를 연봉 순서대로 정렬해서 알고싶다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0ea56bd1-51ab-4447-ae23-5da6277f7dc5/Untitled.png)
    
    ⇒ 이때 부서명 별로 정렬을 한 뒤에 급여별로 내림차순 정렬을 하고 싶다면??
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9dad20bb-eacc-4c45-ae81-892077fe53d8/Untitled.png)
    

## 집계함수(aggregate function)

---

<aside>
🤔 여러 tuple들의 정보를 요약해서 하나의 값으로 추출하는 함수
* NULL값들은 제외하고 값을 추출한다.

</aside>

- COUNT
- SUM
- MAX
- MIN
- AVG
- [ ]  임직원 수를 알고싶다. (COUNT(*) 은 모든 튜플의 갯수를 의미)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cd7a4b22-0870-47ef-9b45-8bd663f2c5d3/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ad90b994-981d-46b1-8108-a9ba211ecde6/Untitled.png)
    
    #NULL은 제외를 하고 센다는 것을 주의해야 한다! COUNT(dept_id)를 했는데 null이 있으면 안될 수도 있으니까 에스터리스크를 통해서 COUNT(*)로 튜플 수 자체를 센다.
    
- [ ]  프로젝트 2002에 참여한 임직우너 수와 최대 연봉과 최소연봉과 평균연봉을 알고싶다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c54320ff-663c-42f9-9f76-a247fda38733/Untitled.png)
    

## group by

---

<aside>
🤔 관심있는 애트리뷰트를 기준으로 그룹을 나눠서 그룹별로 집계함수를 적용하고 싶을때 사용.

*그룹핑한 애트리뷰트가 null값이 있을때는 null값을 가지는 tuple끼리 묶인다.

</aside>

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9e1b8cca-1f16-4f12-b3ca-eff60987e5e7/Untitled.png)

#selct절에 group by를 통해 지정한 그룹명이 조회의 결과에도 동일하게 나와야 하므로 selct절의 일부와과 group by절은 동일해야 한다.

## Having

---

<aside>
🤔 그룹핑하여 나온 결과를 기준으로 어떠한 조건을 걸고싶을떄

*group by와 함께 사용한다
*집계함수의 결과값을 바탕으로 그룹을 필터링하고 싶을 떄 사용

</aside>

- [ ]  프로젝트 참여 인원이 7명 이상인 프로젝트 들에 대해서 각 프로젝트에 참여한 임직원 수와 최대 연봉과 최소 연봉과 평균연봉을 알고싶다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/26290a58-dbaf-4cf8-a226-4d641719833d/Untitled.png)
    

## Example

---

- 각 부서별 인원수를 인원 수가 많은 순서대로 내림차순 정렬해서 알고싶다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bc968969-2e42-45b0-8903-e431bde214af/Untitled.png)
    
    ⇒ null값이 있는 튜플도 그룹끼리 묶여서 집계함수가 실행됐다.
    
- 회사 전체 평균 연봉보다 평균연봉이 적은 부서들의 평균연봉을 알고싶다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fed38246-b8f9-4373-bd7a-9ec7f9debe58/Untitled.png)
    
- 각 프로젝트 별로 프로젝트에 참여한 90년대생들의 수와 이들의 평균 연봉을 알고싶다.
    1. 각 프로젝트 별로 ⇒ 그룹해야겠다
    2. 관련있는 테이블 뭐가 있을지 생각
    3. join을 해야겠구나 무슨join일지 생각
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7324a40f-c382-4716-abfa-9ec765a71389/Untitled.png)
    
- 프로젝트 참여 인원이 7명 이상인 프로젝트에 한정해서 각 프로젝트 별로 프로젝트에 참여한 90년대생들의 수와 이들의 평균연봉을 알고싶다.
    
    ⇒ 그룹핑을 한 뒤에 그 그룹에 대해서 HAVING절을 통해 COUNT를 한 값을 원하는게 아니고 프로젝트 참여 인원이 7명이상인 것을 한정해서 조건걸고 싶었기 때문에 WHERE에 걸어야한다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c2e1a6d6-ffd2-40de-9193-5fc2263c76e2/Untitled.png)
    
    ⇒ 하단그림이 정답
