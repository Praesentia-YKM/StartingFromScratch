<!--  마이바티스와 스프링사이에 있는 그런부분을 scan을 해라 -->
<mybatis-spring:scan base-package="kr.ac.seoil.mapper"/>

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1ff5813f-5d78-47cf-9e62-16e0953222b8/Untitled.png)

자바파일과 리소스디렉토리의 차이점

: 자바 → 컴파일이 필요한 파일들이 들어온다 ( src/main/java)

리소스 → 컴파일이 필요없는 파일들이 들어온다(src/main/resource)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ec554c38-f14f-4a0c-83e7-252a0e9074da/Untitled.png)

⇒ 어쩃든 MAPPER도 INTERFACE인데 그럼 구현체 부분은 뭘까? 라고 생각할 수 있지만

이 부분은 마이바티스 상에서 ID로 연결된거라 JAVA MAPPER파일이 이에 해당하는 구현체라고 볼 수 있다. 이건 마이바티스가 설계될때 그렇게 된거

## Log가 찍힐때 한줄로 쭉 찍히는거 킹받을때

→ 사용자가 한 인덴테이션 그대로 로그에 찍히게 하는 기능

→ 파라미터엔 바인딩까지 되게해서 나오게 하는 기능

⇒하지만 무조건 좋진 않다. 이러한 기능을 탑재함으로써 실행속도가 조금 늦어져서 운영서버에는 이 드라이버 파일을 쓰지 않는다. 개발에는 잘 적용되어있다.

## Model1 과 Model2의 차이점 알아보기

→ Model1 : 보안에 취약함, 소스가 유출된다(jsp에 올인원 되어있으면) 즉, jsp안에 쿼리 ,비지니스 로직, html다 들어있을떄)

→ Model2 : MVC

Model : 서버에서 생성된 데이터를 

View : 사용자에게 보여준다 (브라우저를 통해) 즉, view에다가 model을 묻혀서 보여준다

Controller : 컨트롤러를 통해서~

mvc에는 비지니스개념이 없다. 모델은뭐냐 그럼? 비지니스 개념을 통해서 생성된 애들을 model에 담는거다. 그걸 view로 보여주고 controller로 구현을한다.

- DECODE
    
    DECODE 함수는 오라클 쿼리에서 가장 많이 사용하는 함수 중 하나이다. 표준 SQL 함수가 아니라서 사용을 꺼려하기도 하지만 잘 사용하면 아주 편하기 때문에 유용하다. 최근에는 CASE WHEN 구문 사용을 많이 권장하기도 한다.
    
    DECODE 함수는 프로그래밍에서의  if else 와 비슷한 기능을 수행한다. 간단한 사용방법은 아래와 같다.
    
    예) **DECODE(컬럼, 조건1, 결과1, 조건2, 결과2, 조건3, 결과3..........)**
    
    [https://t1.daumcdn.net/cfile/tistory/99D8F6415CFFC30731](https://t1.daumcdn.net/cfile/tistory/99D8F6415CFFC30731)
    
    ```sql
    WITH temp AS (
        SELECT 'M' gender FROM dual UNION ALL
        SELECT 'F' gender FROM dual UNION ALL
        SELECT 'X' gender FROM dual
    )
    
    SELECT gender
         , DECODE(gender, 'M', '남자', 'F', '여자', '기타') gender2
      FROM temp
    ```
    
    if (gender == "M") {    return "남자";} else if (gender == "F") {    return "여자";} else {    return "기타";}
    
    ---
    
    ```jsx
    SELECT EMPNO, ENAME,JOB,SAL,
    	DECODE (JOB,
    		'MANAGER',SAL*1.1,
    		'SALESMAN',SAL*1.05,
    		'ANALYST', SAL,
    		SAL*1.03
    		) AS UPSAL
    FROM EMP;
    ```
    
- CASE문(DECODE의 결과를 CASE문으로 바꿔봄)
    
    ```jsx
    -- CASE문
    SELECT EMPNO,ENAME,JOB,SAL,
    	CASE JOB
    		WHEN 'MANAGER' THEN SAL*1.1
    		WHEN 'SALESMAN' THEN SAL*1.05
    		WHEN 'ANALYST' THEN SAL
    		ELSE SAL*1.03
    	END	AS UPSAL
    FROM EMP;
    ```
    
- CASE문2 ( CASE문으로 컬럼 조건걸어도 (콤마)는 잊지말자)
    
    ```jsx
    -- CASE문2
    SELECT EMPNO,ENAME,COMM,
    	CASE 
    		WHEN COMM IS NULL THEN '해당사항 없음'
    		WHEN COMM = 0 THEN '수당없음'
    		WHEN COMM > 0 THEN '수당 : ' || COMM 
    	END AS 추가수당
    FROM EMP;
    ```
    
- QUIZ4( TO_CHAR(MGR)로 뽑는거 중요! SUBSTR은 문자열함수이기때문)
    
    ```jsx
    -- QUIZ 4
    SELECT EMPNO,ENAME,MGR,
    	CASE 
    		WHEN MGR IS NULL THEN '0000'
    		WHEN SUBSTR(MGR,1,2)= 75 THEN '5555'
    		WHEN SUBSTR(MGR,1,2)=76 THEN '6666'
    		WHEN SUBSTR(MGR,1,2)=77 THEN '7777'
    		WHEN SUBSTR(MGR,1,2)=78 THEN '8888'
    		ELSE TO_CHAR(MGR)
    	END AS CHG_MGR
    FROM EMP;
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4e18f2e3-1a66-4e1e-8627-dcbee206c913/Untitled.png)
    

— END 6장

## 7장(집계함수~)

---

- SUM
    
    ```jsx
    SELECT SUM(SAL)
    FROM EMP;
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6bb0be3e-6e8d-4f35-90ec-5317e92316ee/Untitled.png)
    
- DISTINCT SUM ( 중복제거 합 )
    
    ```sql
    SELECT SUM(DISTINCT SAL),
    	   SUM(ALL SAL),
    	   SUM(SAL)
      FROM EMP;
    ```
    
- COUNT / DISTINCT COUNT(중복제거 갯수)
    
    > 결과 행의 개수를 출력하는 함수 – COUNT 함수
    > 
    
    ```sql
    -- 부서번호가 30번인 직원 수 구하기
    SELECT COUNT(*)
    FROM EMP e
    WHERE DEPTNO =30;
    
    -- COUNT 중복제거
    SELECT COUNT(DISTINCT SAL)
    	  ,COUNT(ALL SAL)
    	  ,COUNT(SAL)
    FROM EMP;
    ```
    
- COUNT (NULL이 아닌것 카운트)
    
    ```sql
    SELECT COUNT(COMM)
    FROM EMP;
    
    SELECT COUNT(COMM)
    FROM EMP e 
    WHERE COMM IS NOT NULL;
    ```
    
- MIN / MAX (DISTINCT포함) [최근날짜 구할때도 쓰임]
    
    ##MAX##
    
    ```sql
    SELECT MAX(SAL)
    FROM EMP e 
    WHERE DEPTNO =10;
    ```
    
    ##MIN##
    
    ```sql
    SELECT MIN(SAL)
    FROM EMP e 
    WHERE DEPTNO =10;
    ```
    
    ##최근입사일##
    
    ```sql
    --입사일이 가장 최근인 사람의 입사일
    SELECT MAX(HIREDATE)
    FROM EMP e
    WHERE DEPTNO =20;
    ```
    
    ##가장 오래된 입사일##
    
    ```sql
    --입사일이 가장 오래된 사람의 입사일
    SELECT MIN(HIREDATE)
    FROM EMP e
    WHERE DEPTNO =20;
    ```
    
- AVG
    
    ##DISTINCT로 중복제거한 평균값##
    
    ```sql
    SELECT AVG(DISTINCT SAL)
    FROM EMP e 
    WHERE DEPTNO=30;
    ```
    
- GROUP BY[GROUP BY 다음 ORDER BY다]
    
    ```sql
    SELECT AVG(SAL),DEPTNO
    FROM EMP e 
    GROUP BY DEPTNO
    ORDER BY DEPTNO;
    ```
    
    ```sql
    -- 부서번호 및 직책별 평균 급여로 정렬하기
    SELECT DEPTNO,JOB,AVG(SAL)
    FROM EMP E
    GROUP BY JOB,DEPTNO  
    ORDER BY JOB,DEPTNO;
    ```
    
    > 그룹바이에 없는 열을 SELECT절에 포함했을경우 컬럼수가 안 맞기 때문에 에러가 뜬다.
    > 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6df3496c-f56b-473e-9cd5-3983489d1a51/Untitled.png)
    
    ⇒ AVG로 단일행으로 만들고 DEPTNO를 GROUP BY져서 단일행으로 만들었는데 ENAME은 단일행이 아니라서 에러!!
    
- HAVING ⇒출력그룹을 제한하는 조건절
    
    ```sql
    -- HAVING절
    -- 각 부서의 직책별 평균급여를 구하되, 그 평균 급여가 2000이상인 그룹만 출력
    SELECT DEPTNO,JOB,AVG(SAL)
    FROM EMP e 
    GROUP BY DEPTNO,JOB
    HAVING AVG(SAL)>=2000
    ORDER BY DEPTNO ,JOB;
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3e2b5c18-86db-4a15-937e-bc47f5b11f55/Untitled.png)
    
    > 순서 : GROUP BY > HAVING > ORDER BY
    > 
    
    **WHERE 절은 출력대상행을 제한하여 조건거는거고**
    
    **HAVING절은 그룹화도니 대상을 제한하여 조건거는거다.**
    
    ```sql
    SELECT DEPTNO,JOB,AVG(SAL)
    FROM EMP e 
    WHERE DEPTNO=10
    GROUP BY DEPTNO,JOB
    HAVING AVG(SAL)>=2000
    ORDER BY DEPTNO ,JOB;
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2838ab98-3e52-4b4b-8c6a-6c5e3235e818/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/891ea701-e021-4c55-93f6-e394392e74e1/Untitled.png)
    
- SELECT 실행순서와 ALIAS이해(시험별개로 내가 본거임 시험엔 안나옴)
    
    # FROM 절 (+ Join)
    
    **쿼리의 첫번째 실행 순서는 FROM절이다**. FROM 절에서는 조회하는 **테이블 전체**를 가져온다. INDEX를 사용하지 않는다는 가정에서 WHERE절이나 SELECT절에서 일부 행이나 열을 제거하여 출력한다고 해도 가장 처음에 테이블의 모든 데이터를 가져온다.
    
    # WHERE 절
    
    WHERE 절에서는 FROM절에서 읽어온 테이블에서 **조건에 맞는 결과만 갖도록** 데이터를 필터링한다.
    
    # GROUP BY
    
    GROUP BY 절에서는 **선택한 칼럼으로 그룹핑한다.**
    
    # HAVING 절
    
    HAVING 절은 **그룹핑 후에 각 그룹에 사용되는 조건 절**이다. HAVING 절의 조건을 WHERE 절에도 사용할 수 있는 경우라면 WHERE절에 사용하는 것이 바람직하다. **HAVING 절은 각 그룹에 조건을 걸기 때문에 퍼포먼스가 떨어지게 된다.**
    
    예를 들어 MONEY > 10000은 모든 레코드에 MONEY가 10000이 넘어야 한다는 조건이다. 이는 각 그룹에 따로 거는 것보다는 WHERE절로 한번에 거는 것이 좋다. (현재는 내부적으로 Optimize 해준다.)
    
    반면, AVG(MONEY) > 10000처럼 집계함수의 경우에는 각 그룹별로 평균을 구하는 것과 전체 평균을 구하는 것은 다르게 동작하기 때문에 HAVING절을 사용해야 한다.
    
    # SELECT 절
    
    SELECT 절은 여러 조건들을 처리한 후 남은 데이터에서 **어떤 열을 출력해줄지 선택한다.**
    
    # ORDER BY 절
    
    어떤 열까지 출력할지 정했다면 행의 순서를 어떻게 보여줄지 **정렬**해주는 절이 ORDER BY이다.
    
    # LIMIT 절
    
    LIMIT 절은 결과 중 몇개의 행을 보여줄 지 선택한다.
    
    # 실행순서가 중요한 이유
    
    **쿼리의 실행 순서를 아는 것은 중요하다.** 실행순서를 모르면 쿼리를 제대로 작성하기 어렵다. 예를 들어 보자.
    
    **OrderBy 절에서 Alias 사용**
    
    ```sql
    SELECT CONCAT(first_name, last_name)AS full_name
    FROMuserORDERBY full_name;
    ```
    
    ORDER BY 절은 SELECT 절보다 뒤에 실행되기 때문에 SELECT 절의 결과를 사용할 수 있다.
    
    **Where 절에서 Alias 사용**
    
    ```sql
    SELECT CONCAT(first_name, last_name)AS full_name
    FROMuserWHERE full_name = 'VioletBeach';
    ```
    
    Where 절에서는 SELECT 절보다 먼저 실행된다. 즉, WHERE 절은 FROM 절의 결과를 가지고 필터링을 하는 용도이지 SELECT문 에서 사용한 AS를 활용할 수 없다. 그래서 해당 쿼리는 에러가 발생한다.
    
    WHERE 절에서 Alias를 사용하려다가 원치 않는 결과를 받는다거나, ORDER BY 절에서 SELECT 절에서 사용된 함수를 또 호출해서 자원이 낭비되는 이슈를 막으려면 실행 순서에 대한 이해가 필요하다.
    
- ROLLUP ⇒ 그룹화된 데이터의 합계 출력
    
    ```sql
    -- 그룹화 함수 --
    -- 기존 GROUP BY 사용
    SELECT DEPTNO,JOB,COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL)
    FROM EMP e 
    GROUP BY DEPTNO,JOB 
    ORDER BY DEPTNO,JOB
    
    --ROLLUP , CUBE함수 => 그룹화된 데이터의 합계를 출력할 때 사용
    SELECT DEPTNO,JOB,COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL)
    FROM EMP e 
    GROUP BY ROLLUP(DEPTNO,JOB);
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2af53dc1-8dae-4c75-8ee5-6837ad577ba5/Untitled.png)
    
    [[Oracle] ROLLUP 고급 사용법 GROUPING 함수 :: 마이자몽](https://myjamong.tistory.com/191)
    
- CUBE ⇒ 지정한 모든 열에서 가능한 조합의 결과를 모두 출력
    
    ```sql
    -- CUBE함수를 통한 그룹화
    -- 지정한 모든 열에서 가능한 조합의 결과를 모두 출력
    SELECT DEPTNO,JOB,COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL)
    FROM EMP e 
    GROUP BY ROLLUP(DEPTNO,JOB)
    ORDER BY DEPTNO,JOB;
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f828dc5f-aad9-483d-9798-5b80965d12ba/Untitled.png)
