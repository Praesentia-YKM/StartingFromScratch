![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f393b61e-25af-4d42-bdf3-6943530ba2be/Untitled.png)

⇒ 컴파일시 파일이 ex00/target/classes아래 쌓임

- 패키지 보임 변경
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/44032556-b74d-4dd0-8e36-d3a3606c533f/Untitled.png)
    
- 트랜잭션
    
    만약,
    
    내가 TB_USER라는 테이블에 INSERT를 했다.
    
    이때 다른 사람들도 이 데이터베이스에 접근이 가능할거다.
    
    이때 우리가 아래줄에 다시 SELECT * FROM TB_USER; 을 하면 다 보이는데 이러면
    
    다른 사람들은 LOCK이 걸려있는 상태다. 왜냐하면 내가 INSERT해놨기때문에 접근이 안된다. 이때 다른 사람들이 접근을 하게 해주려면 COMMIT이나 ROLLBACK을 해줘야한다.
    
    만약, 우리가 쇼핑몰을 만들고 있다.
    
    사용자가 이 물건을 사야지 하고 클릭을 하면 장바구니 테이블에 INSERT가 될 것이다.
    
    그러고 나서 이제 재고테이블에서 수량을 -1해줘야한다. (재고테이블과 장바구니 테이블에 있는 PRODUCT ID 와 USER ID가 있을거다 ) 이렇게 우리는 물건을 살때 INSERT와 UPDATE 두번이 발생한다. 이것들이 한번의 동작으로 일어나야한다. 이때 에러가 날 수도있다. 
    
    이때 INSERT문은 성공이 됐는데 UPDATE에서 에러가 나버린다면? 그럼 장바구니에는 INSERT가 성공해서 들어가있는데 재고는 -1이 안된 상황이다. 이건 큰 문제를 발생시킨다.
    
    그래서 우리는 이게 ALL OR NOTHING과 같이 다 되던가, 다 안되던가에 대한 트랜잭션을 걸어줘야한다. 이런 부분을 예전엔 개발자들이 다 해줬어야했는데 이걸 스프링에서 제공해준다.
    
- 의존성 주입 (Dependency Injection)
    - [ ]  생성자 의존성 주입
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0faccfe5-e520-43e9-8fe4-f4bdc8b38fcd/Untitled.png)
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/063cbd27-beda-40d7-9670-a22c532d77b2/Untitled.png)
        
        ⇒ 생성자에 아예 chef가 박혀있으니까 restaurant를 생성만해도 사용이 가능해서 더 편리하다.
        
    
    - [ ]  setter 주입
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7171203f-e5f4-4518-be2e-5977ce800e06/Untitled.png)
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/77fa9ba2-4cef-4427-8b1d-e12eb5e25d24/Untitled.png)
        
        ⇒ setter방식은 레스토랑이라는 객체를 사용할떄마다 chef를 항상 만들어줘야한다.
        
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/58e834ae-2709-4873-9240-600f624530f7/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/931838f5-e2c6-4803-9a47-01c083d39964/Untitled.png)
    
    → context선택
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80fb10b4-9455-4f3e-b7bb-1e6877ad3857/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3d6ffb32-212f-48af-b83a-2aa29bab4695/Untitled.png)
    
    ⇒ base-package url을 가지고 있는 이해 모든 파일은 컴포넌트 스캔을 적용한다, @Component로 관리할게~
    
    <aside>
    🤔 @Component
    @Controller
    @Service
    @Mapper   → Mapper쓸떄
    @Repository  → DAO쓸때 사용    
    이 모든 어노테이션을 다 Component Scan한다.
    
    </aside>
    
    Persistance                                         Business                                             Persistance
    
    ⇒ MVC딴                                        ⇒Framework                                     ⇒ Mybatis
    ⇒ Controller                                   ⇒ AOP, Service, Impl    
    
    (servlet-context.xml                      (root-context.xml이 
    이 persistance를 담당)                    business를 담당)
    
    스프링을 두단계로 로딩을한다
    
    web과관련( dispatcher servlet이라고 부름)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/857bd547-8fd2-463c-bc20-48c200d6b934/Untitled.png)
    
    ⇒ root-context는 Business영역을 담당하다보니까 Controller까지 적용시켜버린 base-package경로는 나중에 에러가 발생할 수 있다. 왜냐하면 Controller는 web과 관련된 Persistance부분이기때문에.
    
    그래서 여기서 경로를 kr.or.seoil.sample로 해야한다.
    
    - [ ]  Autowired를 통한 의존성 주입
        
        ⇒ spring이 bean을 관리한다. 스프링이 기본적으로 new를 시켜둔다.
        
        생성자 주입 이딴거 필요없음.
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/546faa12-cb3b-47f2-ab17-7c872f2fd7c5/Untitled.png)
        
    
    - [ ]  이렇게도 가능함
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/66b591cc-abaa-4b4a-9598-8f0a6611c426/Untitled.png)
        
- pom.xml (
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b1e9bbea-708e-46f0-831d-a63134bbeca3/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/76b13a27-a5a4-4221-9ac4-232325a7b939/Untitled.png)
    
    ⇒ jUnit이라는 걸 사용하기 위해 생성
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e6a770d3-88f5-4df7-867c-2c309bb08dad/Untitled.png)
    
    ⇒ lombok주입
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57ae849c-b497-49cd-80e7-5d7164b63083/Untitled.png)
    
    ⇒ log4j 버전 변경 ( 1.2.15 → 1.2.17)
    
- Lombok
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7c56456c-80ea-4574-9ac9-058ee17e19de/Untitled.png)
    
    - [ ]  lombok을 통한 setter 의존성주입
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb24db3a-7e3a-41c4-8a3d-ff8cdff9906e/Untitled.png)
        
- junit을 통한 테스트(테스트 도구)
    - 스프링과 관련된 부분을 테스트할 수 있다.
    
     mvc딴이 아닌 저 부분을 읽어들여~
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/109c1904-9766-4374-b052-ce50e09e3d8d/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3a656b5-8c0d-432f-9ba8-ae6f0a1ab876/Untitled.png)
    
    ⇒ 
    
    > assertNotNull(restaurant); //null이 아니면 실행 -> null이 아니라는건 rastaurant가 new로 메모리할당이 됐다는거.
    // root-context.xml에 kr.ac.seoil.sample 아래에 있는 conponent scan을 통해 @component가 붙은건 new로 다 객체를 생성해둔다고
    // 했으니까 이 값은 null이 아니다.
    > 
    
    - [ ]  Log는 무엇인가?
        
        ⇒ level이 있다 log는 (치명적인 순서대로)
        
        - fatal
        - error [ fatal 과 error인 놈을 로그에 남긴다]
        - warn [ fatal과 error 과 warn 을 로그에 남긴다]
        - info  [ fatal과 error 과 warn과 info 을 로그에 남긴다]
        - debug  [ fatal과 error 과 warn과 info와 debug 을 로그에 남긴다]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17e5373a-15e6-47e3-89cb-5d3951f2d8b6/Untitled.png)
    
    ⇒ 어떠한 기준에 대해 로그를 info ..등으로 남겨라 라는 설정파일.xml
    
    ⇒ test실행 [ log의 레벨에 따른 콘솔에 어케 뜨는지 - info를 warn으로 xml에서 바꾸면 warn으로뜸 ]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/db08a4dc-352d-4ae8-a8ae-29a682b5dcc3/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b8bc5cf9-4ac9-421b-8b0f-80efa021b108/Untitled.png)
    
    ⇒ 최종테스트(lombok을 통해 getter가 자동 호출됐는지 확인) [ lombok을 통한 setter ]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/677258f7-d2d9-4977-91b9-1255faf9c54c/Untitled.png)
