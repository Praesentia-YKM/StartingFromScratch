![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f393b61e-25af-4d42-bdf3-6943530ba2be/Untitled.png)

⇒ 컴파일시 파일이 ex00/target/classes아래 쌓임

- 패키지 보임 변경
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/44032556-b74d-4dd0-8e36-d3a3606c533f/Untitled.png)
    
- 트랜잭션
    
    만약,
    
    내가 TB_USER라는 테이블에 INSERT를 했다.
    
    이때 다른 사람들도 이 데이터베이스에 접근이 가능할거다.
    
    이때 우리가 아래줄에 다시 SELECT * FROM TB_USER; 을 하면 다 보이는데 이러면
    
    다른 사람들은 LOCK이 걸려있는 상태다. 왜냐하면 내가 INSERT해놨기때문에 접근이 안된다. 이때 다른 사람들이 접근을 하게 해주려면 COMMIT이나 ROLLBACK을 해줘야한다.
    
    만약, 우리가 쇼핑몰을 만들고 있다.
    
    사용자가 이 물건을 사야지 하고 클릭을 하면 장바구니 테이블에 INSERT가 될 것이다.
    
    그러고 나서 이제 재고테이블에서 수량을 -1해줘야한다. (재고테이블과 장바구니 테이블에 있는 PRODUCT ID 와 USER ID가 있을거다 ) 이렇게 우리는 물건을 살때 INSERT와 UPDATE 두번이 발생한다. 이것들이 한번의 동작으로 일어나야한다. 이때 에러가 날 수도있다. 
    
    이때 INSERT문은 성공이 됐는데 UPDATE에서 에러가 나버린다면? 그럼 장바구니에는 INSERT가 성공해서 들어가있는데 재고는 -1이 안된 상황이다. 이건 큰 문제를 발생시킨다.
    
    그래서 우리는 이게 ALL OR NOTHING과 같이 다 되던가, 다 안되던가에 대한 트랜잭션을 걸어줘야한다. 이런 부분을 예전엔 개발자들이 다 해줬어야했는데 이걸 스프링에서 제공해준다.
    
- 의존성 주입 (Dependency Injection)
    - [ ]  생성자 의존성 주입
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0faccfe5-e520-43e9-8fe4-f4bdc8b38fcd/Untitled.png)
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/063cbd27-beda-40d7-9670-a22c532d77b2/Untitled.png)
        
        ⇒ 생성자에 아예 chef가 박혀있으니까 restaurant를 생성만해도 사용이 가능해서 더 편리하다.
        
    
    - [ ]  setter 주입
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7171203f-e5f4-4518-be2e-5977ce800e06/Untitled.png)
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/77fa9ba2-4cef-4427-8b1d-e12eb5e25d24/Untitled.png)
        
        ⇒ setter방식은 레스토랑이라는 객체를 사용할떄마다 chef를 항상 만들어줘야한다.
        
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/58e834ae-2709-4873-9240-600f624530f7/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/931838f5-e2c6-4803-9a47-01c083d39964/Untitled.png)
    
    → context선택
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80fb10b4-9455-4f3e-b7bb-1e6877ad3857/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3d6ffb32-212f-48af-b83a-2aa29bab4695/Untitled.png)
    
    ⇒ base-package url을 가지고 있는 이해 모든 파일은 컴포넌트 스캔을 적용한다, @Component로 관리할게~
    
    <aside>
    🤔 @Component
    @Controller
    @Service
    @Mapper   → Mapper쓸떄
    @Repository  → DAO쓸때 사용    
    이 모든 어노테이션을 다 Component Scan한다.
    
    </aside>
    
    Persistance                                         Business                                             Persistance
    
    ⇒ MVC딴                                        ⇒Framework                                     ⇒ Mybatis
    ⇒ Controller                                   ⇒ AOP, Service, Impl    
    
    (servlet-context.xml                      (root-context.xml이 
    이 persistance를 담당)                    business를 담당)
    
    스프링을 두단계로 로딩을한다
    
    web과관련( dispatcher servlet이라고 부름)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/857bd547-8fd2-463c-bc20-48c200d6b934/Untitled.png)
    
    ⇒ root-context는 Business영역을 담당하다보니까 Controller까지 적용시켜버린 base-package경로는 나중에 에러가 발생할 수 있다. 왜냐하면 Controller는 web과 관련된 Persistance부분이기때문에.
    
    그래서 여기서 경로를 kr.or.seoil.sample로 해야한다.
    
    - [ ]  Autowired를 통한 의존성 주입
        
        ⇒ spring이 bean을 관리한다. 스프링이 기본적으로 new를 시켜둔다.
        
        생성자 주입 이딴거 필요없음.
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/546faa12-cb3b-47f2-ab17-7c872f2fd7c5/Untitled.png)
        
    
    - [ ]  이렇게도 가능함
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/66b591cc-abaa-4b4a-9598-8f0a6611c426/Untitled.png)
        
- pom.xml (
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b1e9bbea-708e-46f0-831d-a63134bbeca3/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/76b13a27-a5a4-4221-9ac4-232325a7b939/Untitled.png)
    
    ⇒ jUnit이라는 걸 사용하기 위해 생성
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e6a770d3-88f5-4df7-867c-2c309bb08dad/Untitled.png)
    
    ⇒ lombok주입
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57ae849c-b497-49cd-80e7-5d7164b63083/Untitled.png)
    
    ⇒ log4j 버전 변경 ( 1.2.15 → 1.2.17)
    
- Lombok
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7c56456c-80ea-4574-9ac9-058ee17e19de/Untitled.png)
    
    - [ ]  lombok을 통한 setter 의존성주입
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb24db3a-7e3a-41c4-8a3d-ff8cdff9906e/Untitled.png)
        
- junit을 통한 테스트(테스트 도구)
    - 스프링과 관련된 부분을 테스트할 수 있다.
    
     mvc딴이 아닌 저 부분을 읽어들여~
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/109c1904-9766-4374-b052-ce50e09e3d8d/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3a656b5-8c0d-432f-9ba8-ae6f0a1ab876/Untitled.png)
    
    ⇒ 
    
    > assertNotNull(restaurant); //null이 아니면 실행 -> null이 아니라는건 rastaurant가 new로 메모리할당이 됐다는거.
    // root-context.xml에 kr.ac.seoil.sample 아래에 있는 conponent scan을 통해 @component가 붙은건 new로 다 객체를 생성해둔다고
    // 했으니까 이 값은 null이 아니다.
    > 
    
    - [ ]  Log는 무엇인가?
        
        ⇒ level이 있다 log는 (치명적인 순서대로)
        
        - fatal
        - error [ fatal 과 error인 놈을 로그에 남긴다]
        - warn [ fatal과 error 과 warn 을 로그에 남긴다]
        - info  [ fatal과 error 과 warn과 info 을 로그에 남긴다]
        - debug  [ fatal과 error 과 warn과 info와 debug 을 로그에 남긴다]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17e5373a-15e6-47e3-89cb-5d3951f2d8b6/Untitled.png)
    
    ⇒ 어떠한 기준에 대해 로그를 info ..등으로 남겨라 라는 설정파일.xml
    
    ⇒ test실행 [ log의 레벨에 따른 콘솔에 어케 뜨는지 - info를 warn으로 xml에서 바꾸면 warn으로뜸 ]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/db08a4dc-352d-4ae8-a8ae-29a682b5dcc3/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b8bc5cf9-4ac9-421b-8b0f-80efa021b108/Untitled.png)
    
    ⇒ 최종테스트(lombok을 통해 getter가 자동 호출됐는지 확인) [ lombok을 통한 setter ]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/677258f7-d2d9-4977-91b9-1255faf9c54c/Untitled.png)
    
    
    - 프로젝트 열기
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/437a33b7-c510-4bd4-b181-84c64cb5d7de/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/82919d44-c943-4694-b8d1-6e1d402f5ed1/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0990400b-4b09-48cd-930b-274d95e9dda4/Untitled.png)
    
- maven이란
    
    > 크게 2가지 : 라이브러리관리 , 배포를위한 빌드
    > 
    - [ ]  build부분!
        
        ⇒ 실행을 할 수 있어야 한다.
        
        서블릿 ⇒ web → 브라우저(was)
        
        즉, 이클립스(local)을 was [ 배포 ] 시켜야한다.
        
        개념!!
        
        <aside>
        🤔 # web.xml ⇒ 자바파일 외 나머지들
        
        # 자바파일→컴파일 → classes
        
        #lib → jar ( maven dependencies아래있는 jar을 톰켓이 빌드해서 web-inf아래에 뿌려준다)
        
        #maven_home → C:\Users\로그인아이디\~아래에 있음
        
        </aside>
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ab191bb0-8bcb-4d62-a20f-b991dc080dde/Untitled.png)
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/90ab0450-11d8-46bf-86d5-83d61471a8e6/Untitled.png)
        
        [[Eclipse] 이클립스 maven repository 경로 설정 (settings.xml)](https://mine-it-record.tistory.com/160)
        
        ⇒ 이 블로그에서 xml 세팅 코드 긁어다가 수동으로 repository아래 settings.xml생성 후 코드 작성
        
    
    <offline>false가 뭐냐면 → maven은 인터넷이 무조건 필요하다 그래서 넥서스라고 사설 레포즈토리를 만든다음 거기에 다 올려둔다. 그러고 싶을때 하는거다. 어쩌피 실습환경은 인터넷 되니까 필요없는 조건이긴함. 하지만 그대로 진행
    
    ⇒ 자 이제 이클립스에서 user settings변경
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f81ca1a4-adcd-4822-917c-def815117b20/Untitled.png)
    
    (maven은 설정파일을 바꿨으면 update 해줘야함 [아래사진참고]
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b5b462d3-e299-4bf0-accd-ac54f54d0718/Untitled.png)
    
    그럼 뭐가 생김을 알 수 있따. 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/12f092ac-9745-41db-b285-6007bc8a9d37/Untitled.png)
    
    #POM.XML열기
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b3080b01-ad1c-4018-a655-a6df1ce7bf70/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/959b463d-5d44-46c0-b341-bbfbc68a0841/Untitled.png)
    
    ⇒ 프로퍼티스 태그안에 내용을 변수화해서 디펜던시 아래 <version>에 적용한거다.
    
    pom.xml알아보기 → jar에 의존성까지 고려해서 jar가 자동으로 등록된다.(라이브러리관리)
    
    ctrl + f 로 스페이스바 처리를 tab키로 바꾸는 방법(xml파일이나 jsp등 인덴테이션이 중요할떄 활용가능)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/86afb2d8-9421-4983-9634-16cfc2d43106/Untitled.png)
    
    ##우리는 openJDK12버전인데 지금 현재 우리 프로젝트의 컴파일레벨이 너무 낮다. 올려야함
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c8a7f16e-7e68-41c8-8ef9-4c8ec19de778/Untitled.png)
    
    ⇒ 12로 변경
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1731e1c4-aeea-4274-bf8f-4f3a8b8ea035/Untitled.png)
    
    ⇒ 저장 후 update project
    
    ##서버적용
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3a029956-658e-4679-a60c-b8d162d6bf0f/Untitled.png)
    
    ##preferences : 이클립스의 기본설정(window탭)
    
    설정을 바꾸고싶으면 properties에서 바꾼다 (프로젝트 우클릭)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1ab5707b-cd1f-42c0-8c04-f764591b614f/Untitled.png)
    
    ⇒ context_path라고 부른다 : 이게 뭘까
    
    ⇒ / 로 설정
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d5fe4dad-679f-4179-ad17-0c9f60fdc12a/Untitled.png)
    
    ⇒ 톰캣이 올라가는 과정 : 빨간거
    
    그 하단에 검정들은 스프링프레임워크가 올라가는 것
    
    business , service 나누기 → aop
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d5eb4479-247d-4c43-821a-b3a282b67d3b/Untitled.png)
    
    ⇒ 스프링에 등록됨
    
    MVC
    
    : Model View Controller
    
    url을 통해( MVC딴)에서 들어왔다 → 무조건 @Controller박아야한다. url해석함
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/492978ac-5fa1-4c2e-8e8c-9fc3af699aec/Untitled.png)
    
- lombok이란
    
    자동으로 private변수만 vo에 설정해줘도 getter setter만들어준다.
    
    ##설치
    
    [Project Lombok](https://projectlombok.org/)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1aec59b8-ff38-4e07-86ea-08c7d8600e97/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c7b06daf-f047-4a53-b51e-4dfeac5fd91f/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a570cbef-0acf-49ee-a434-d16862814f1e/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be4088f3-ec56-4b29-a9f3-f08e13da8a71/Untitled.png)
    
    <aside>
💡 그렇다면 DBMS는 무엇일까요?

DBMS - Database Management System, 즉 다수의 사용자들이 데이터베이스 내의 데이터에게 접근, 사용할 수 있도록 해주는 소프트웨어를 말합니다.

</aside>

> 기본적인거지만 머리속에 박히게 하기 위해 정리해본다
> 
> 
> 일단 client와 server 디비 스토리지는 다 네트워크로 연결되어있다고 보면된다
> 
> 각 pc는 각자의 ip주소가 있고 그 안에서 포트번호에 따라 역할이 나뉜다
> 
> 예를 들어서 내 pc의 ip주소가 127.0.0.1이면
> 
> mysql이라는 dbms의 포트번호가 3306이므로
> 
> 웹서버의 포트번호가 80이므로
> 
> 내 pc에 깔린 mysql의 ip주소는 127.0.0.1.3306이라고 보면되고
> 
> 내 pc에 깔린 웹서버의 ip주소는 127.0.0.1.80이라고 보면 된다
> 
> 자 이제 클라이언트 서버 디비에서 돌아가는 프로세스에 대해서 구체적으로 정리해보겠다
> 
> client에서 서버에 접속하려면 일단 ip주소를 알아야하는데
> 
> 그 서버안에서 웹서버냐 dbms이냐 따라서 포트번호가 다르므로
> 
> 서버의 웹서버에 접속하는것과 서버의 dbms에 접속하는것에 따라
> 
> 접속해야되는 ip주소도 다르다
> 
> 철수가 네이버에 접속한다고 하자
> 
> 철수가 네이버에서 회원가입을 하면(request(정확히 말하면 create)를 하면 server(쉽게 말하면 네이버 웹서버)는 철수의 resquet를 처리한다 그리고 네이버웹서버와 연결된 데이터베이스(네이버 자체 디비서버에 설치된 dbms) 에 철수의 회원정보를 저장한다
> 
> database: 테이블 형태로 잘정리된 데이터의 집합
> 
> database를 관리하는 응용프로그램=dbms -> ex) mysql, oracle 등등
> 
> dbms만 설치된 pc(서버)=db와 관련된 기능만 맡은 pc(서버)=db 서버
> 
> 그니까 내 pc가 mysql만 깔려있는 dbms역할만 하는 pc라면 내 컴퓨터도 디비서버인것이다
> 
> 추가적으로 클라우드로 시스템을 구축한다면 클라우드업체 서버실에 시스템도 깔려있고
> 
> 시스템의 데이터베이스를 관리하는 디비서버도 상주하고
> 
> 우리(client)는 클라우드업체 서버실과 네트워크로 연결해서 그 시스템을 사용하는것이다
>

## 웹 서버(Web Server)

---

웹 서버란 HTTP 프로토콜을 기반으로 클라이언트가 웹 브라우저에서 어떠한 요청을 하면 그 요청을 받아 **정적 컨텐츠**를 제공하는 서버이다. 정적 컨텐츠란 단순 HTML 문서, CSS, 이미지, 파일 등 즉시 응답 가능한 컨텐츠이다.

이때 웹 서버가 정적 컨텐츠가 아닌 동적 컨텐츠를 요청받으면 WAS에게 해당 요청을 넘겨주고, WAS에서 처리한 결과를 클라이언트에게 전달하는 역할도 해준다.

이러한 웹 서버에는 Apache, NginX 등이 있다.

## WAS(Web Application Server)

---

WAS란 DB 조회 혹은 다양한 로직 처리를 요구하는 **동적 컨텐츠**를 제공하기 위해 만들어진 Application 서버이다. HTTP 프로토콜을 기반으로 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어로서, 주로 데이터베이스 서버와 같이 수행된다.

WAS는 JSP, Servlet 구동환경을 제공해주기 때문에 서블릿 컨테이너 혹은 웹 컨테이너로 불린다.

이러한 WAS는 웹 서버의 기능들을 구조적으로 분리하여 처리하고자 하는 목적으로 제시되었다. 분산 트랜잭션, 보안, 메시징, 쓰레드 처리 등의 기능을 처리하는 분산 환경에서 사용된다. WAS는 프로그램 실행 환경과 DB 접속 기능을 제공하고, 여러 개의 트랜잭션을 관리 가능하다. 또한 비즈니스 로직을 수행할 수 있다.

이러한 WAS에는 Tomcat, JBoss, WebSphere 등이 있다.

## 웹 서버와 WAS

![https://blog.kakaocdn.net/dn/8iqqs/btryJjFiSeI/eck3RcimeMDNA3K2aNJ7n0/img.webp](https://blog.kakaocdn.net/dn/8iqqs/btryJjFiSeI/eck3RcimeMDNA3K2aNJ7n0/img.webp)

[그림 1] WAS 구조

WAS는 Web Server와 Web Container의 역할을 모두 할 수 있다. 여기서 컨테이너는 JSP, Servlet을 실행시킬 수 있는 소프트웨어를 말한다. 현재 WAS의 웹 서버도 정적인 컨텐츠를 처리하는 데 성능상 큰 차이가 없다.

그렇다면 WAS가 웹 서버의 기능까지 모두 수행하면 되는 것일까?

**웹 서버와 WAS를 분리해야 한다.** 그 이유는 다음과 같다.

1. 서버 부하 방지

WAS와 웹 서버는 분리하여 서버의 부하를 방지해야 한다. WAS는 DB 조회나 다양한 로직을 처리하고, 단순한 정적 컨텐츠는 웹 서버에서 처리해줘야 한다. 만약 정적 컨텐츠까지 WAS가 처리한다면 부하가 커지게 되고, 수행 속도가 느려질 것이다.

2. 보안 강화

SSL에 대한 암호화, 복호화 처리에 웹 서버를 사용 가능

3. 여러 대의 WAS 연결 가능

로드 밸런싱을 위해 웹 서버를 사용할 수 있다. 여러 개의 서버를 사용하는 대용량 웹 어플리케이션의 경우 웹 서버와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다.

4. 여러 웹 어플리케이션 서비스 가능

하나의 서버에서 PHP, JAVA 애플리케이션을 함께 사용할 수 있다.

이러한 이유로 웹 서버를 WAS 앞에 두고 필요한 WAS들을 웹 서버에 플러그인 형태로 설정하면 효율적인 분산 처리가 가능하다.

## Web Service Architecture

![https://blog.kakaocdn.net/dn/COYM9/btryI3bxOeM/7kDfuTH2HxaQGAHjeFquS1/img.webp](https://blog.kakaocdn.net/dn/COYM9/btryI3bxOeM/7kDfuTH2HxaQGAHjeFquS1/img.webp)

[그림 2] 웹 서비스 구조

웹 서비스는 아래와 같이 다양한 구조를 가질 수 있다.

1. Client -> 웹 서버 - > DB

2. Client -> WAS -> DB

3. Client -> 웹 서버 -> WAS -> DB

[그림 2]는 3번 구조를 나타낸다. 클라이언트가 웹 서버에 HTTP 요청을 보내면 웹 서버는 정적인 컨텐츠 요청은 바로 응답하고, 동적인 컨텐츠 요청은 WAS에게 넘겨서 처리하고 결과를 WAS에게 받아서 클라이언트에게 넘겨준다.
