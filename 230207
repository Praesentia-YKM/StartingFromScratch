> 변수명 = function() { }
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0afce3a8-d193-4957-9a13-59e1b193cc6e/Untitled.png)

> 익명함수란? 1회성호출을 하는 함수  함수정의 + 함수선언 [  () 해주면됨 ] 의 합쳐짐
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f7826c6f-81de-4eae-b0ed-ef40c130a6e7/Untitled.png)

> 숫자 + 숫자 , 문자 + 숫자
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/91a00852-bcfb-40b5-b736-c4f2d59dea74/Untitled.png)

i+j는 숫자+숫자라 숫자형식으로 0+1 = 1이 나올 것이다. 하지만 앞쪽에 ‘coding everybody’라는 문자열 + i  가 먼저기 때문에 자바스크립트는 문자열 + 숫자는 뒤에 숫자부분을 자동으로 문자열로 인식해서 바꿔준다. 따라서 i+j는 앞쪽의 문자열에 의해 문자열취급을 받게 된다. 01로 출력

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8451ad4-b4a5-467d-a4ea-7925e9cad00f/Untitled.png)

개발자 도구에서 watch expressions으로 내가 보고싶은 값을 추가해서 변화를 볼 수 있다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/95d71586-ffac-4bc3-bec9-2255e6903198/Untitled.png)

다음행으로 이동.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3a46712-dd38-4682-a849-1ec8fd91c5ce/Untitled.png)
## SQL에서 SUBSTRING과 자바에서 SUBSTRING이 형식이 다르다!!!!!!!!

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/91bb7bc0-9398-4523-a708-21c52261b5f8/Untitled.png)

<스칼라 서브쿼리>
스칼라 서브 쿼리 간단히 설명하자면 SELECT 절에 사용하는 서브 쿼리로써 단순한 JOIN을 대체할 목적으로 사용되는 경우가 많다.
다만 풀 스캔 등을 유발하는 등 JOIN에 비해서 알고리즘적 성능면에서 다소 떨어지기 때문에 JOIN을 할 수 있는 경우는 JOIN을 하는 게 좋다.
또한 서브쿼리에 조건에 따라 반드시 하나의 값을 출력하게 되며(단 한 개의 행을 출력한다는 의미가 아님), 만약에 서브 쿼리에 결과 데이터가 
없을 경우 NULL 값을 리턴하다. 어떤 면에서는 OUTERJOIN과 다소 비슷한 역할을 하기도 한다.

우선 서브쿼리(Subquery)란 sql내에 다른 sql이 포함되어있는 포함되어있는 쿼리를 의미합니다.

SELECT절에 포함된 서브쿼리를 스칼라 서브쿼리라고 부르는데,
스칼라 서브쿼리로 부터 나오는 결과는 반드시 하나여야합니다.(그렇지 않을 경우 에러 발생...)


예시) 업체 리스트를 조회하는데 해당 업체의 총 좋아요 갯수까지 함께 조회한다.
SELECT business_number, (
	SELECT count(*) 
	FROM  like_store i
	WHERE i.business_number = s.business_number
)
FROM stores s;
위 쿼리의 수행 순서는 메인 쿼리 -> 서브 쿼리 순으로 동작합니다.

서브쿼리는 결과 건수만큼 반복 수행되기 때문에 조회되는 데이터의 갯수가 적다면 크게 문제될 것은 없지만,
조회 되는 데이터의 갯수가 많아지면 많아질 수록 성능이 현저히 떨어지는 모습을 볼 수 있습니다.

또한 스칼라 서브쿼리 사용시 서브쿼리의 결과값이 같은 경우가 많거나, 매번 동일한 결과값을 반환한다면, 스칼라 서브쿼리의 캐싱 효과를 통해 성능을 높일 수 있으나, 
'서브쿼리에서 사용되는 조건의 종류가 많아지거나 혹은 조건 데이터가 지속적으로 바뀔경우 캐싱의 효율성이 떨어지기 때문에 이전보다 성능이 떨어질 수 있습니다.
