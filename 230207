> 변수명 = function() { }
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0afce3a8-d193-4957-9a13-59e1b193cc6e/Untitled.png)

> 익명함수란? 1회성호출을 하는 함수  함수정의 + 함수선언 [  () 해주면됨 ] 의 합쳐짐
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f7826c6f-81de-4eae-b0ed-ef40c130a6e7/Untitled.png)

> 숫자 + 숫자 , 문자 + 숫자
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/91a00852-bcfb-40b5-b736-c4f2d59dea74/Untitled.png)

i+j는 숫자+숫자라 숫자형식으로 0+1 = 1이 나올 것이다. 하지만 앞쪽에 ‘coding everybody’라는 문자열 + i  가 먼저기 때문에 자바스크립트는 문자열 + 숫자는 뒤에 숫자부분을 자동으로 문자열로 인식해서 바꿔준다. 따라서 i+j는 앞쪽의 문자열에 의해 문자열취급을 받게 된다. 01로 출력

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8451ad4-b4a5-467d-a4ea-7925e9cad00f/Untitled.png)

개발자 도구에서 watch expressions으로 내가 보고싶은 값을 추가해서 변화를 볼 수 있다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/95d71586-ffac-4bc3-bec9-2255e6903198/Untitled.png)

다음행으로 이동.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3a46712-dd38-4682-a849-1ec8fd91c5ce/Untitled.png)
## SQL에서 SUBSTRING과 자바에서 SUBSTRING이 형식이 다르다!!!!!!!!

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/91bb7bc0-9398-4523-a708-21c52261b5f8/Untitled.png)

<스칼라 서브쿼리>
스칼라 서브 쿼리 간단히 설명하자면 SELECT 절에 사용하는 서브 쿼리로써 단순한 JOIN을 대체할 목적으로 사용되는 경우가 많다.
다만 풀 스캔 등을 유발하는 등 JOIN에 비해서 알고리즘적 성능면에서 다소 떨어지기 때문에 JOIN을 할 수 있는 경우는 JOIN을 하는 게 좋다.
또한 서브쿼리에 조건에 따라 반드시 하나의 값을 출력하게 되며(단 한 개의 행을 출력한다는 의미가 아님), 만약에 서브 쿼리에 결과 데이터가 
없을 경우 NULL 값을 리턴하다. 어떤 면에서는 OUTERJOIN과 다소 비슷한 역할을 하기도 한다.

우선 서브쿼리(Subquery)란 sql내에 다른 sql이 포함되어있는 포함되어있는 쿼리를 의미합니다.

SELECT절에 포함된 서브쿼리를 스칼라 서브쿼리라고 부르는데,
스칼라 서브쿼리로 부터 나오는 결과는 반드시 하나여야합니다.(그렇지 않을 경우 에러 발생...)


예시) 업체 리스트를 조회하는데 해당 업체의 총 좋아요 갯수까지 함께 조회한다.
SELECT business_number, (
	SELECT count(*) 
	FROM  like_store i
	WHERE i.business_number = s.business_number
)
FROM stores s;
위 쿼리의 수행 순서는 메인 쿼리 -> 서브 쿼리 순으로 동작합니다.

서브쿼리는 결과 건수만큼 반복 수행되기 때문에 조회되는 데이터의 갯수가 적다면 크게 문제될 것은 없지만,
조회 되는 데이터의 갯수가 많아지면 많아질 수록 성능이 현저히 떨어지는 모습을 볼 수 있습니다.

또한 스칼라 서브쿼리 사용시 서브쿼리의 결과값이 같은 경우가 많거나, 매번 동일한 결과값을 반환한다면, 스칼라 서브쿼리의 캐싱 효과를 통해 성능을 높일 수 있으나, 
'서브쿼리에서 사용되는 조건의 종류가 많아지거나 혹은 조건 데이터가 지속적으로 바뀔경우 캐싱의 효율성이 떨어지기 때문에 이전보다 성능이 떨어질 수 있습니다.

조인 (INNER JOIN) : 기준 테이블과 조인 테이블 모두 데이터가 존재해야 조회됨
아우터 조인 (OUTER JOIN) : 기준 테이블에만 데이터가 존재하면 조회됨

<inner join>
ELECT a.empno
     , a.ename
     , a.job
     , a.mgr
     , a.deptno
     , b.dname
  FROM emp AS a
 INNER JOIN dept AS b
    ON a.deptno = b.deptno
조인은 기준 테이블(emp), 조인 테이블(dept)에  조인 컬럼(deptno)에 해당하는 값이 모두 존재하는 경우에만 데이터가 조회된다
emp 테이블 "KING"의 deptno "90"은 dept 테이블에 존재하지 않기 때문에 조회되지 않는다.

<LEFT OUTER JOIN>
SELECT a.empno
     , a.ename
     , a.job
     , a.mgr
     , a.deptno
     , b.dname
  FROM emp AS a
  LEFT OUTER JOIN dept AS b
    ON a.deptno = b.deptno
아우터 조인에서 LEFT, RIGHT는 기준 테이블을 지정하는 것이며, 위의 쿼리에서 LEFT OUTER JOIN의 기준 테이블은 emp 테이블이다. 
아우터 조인의 경우 조인 테이블(dept)에 데이터가 없어도 기준 테이블(emp)의 모든 데이터가 조회되고 조인 
테이블(dept)에 데이터가 존재할 경우 해당 데이터를 참조할 수 있다.
emp 테이블 "KING"의 deptno "90"은 dept 테이블에 존재하지 않아도 조회가 되지만, dname은 참조할 수 없기 때문에 NULL로 표시된다.

<아우터 조인  (RIGHT OUTER JOIN)>
SELECT a.empno
     , a.ename
     , a.job
     , a.mgr
     , a.deptno
     , b.dname
  FROM emp AS a
 RIGHT OUTER JOIN dept AS b
    ON a.deptno = b.deptno

LEFT OUTER JOIN과 개념을 동일하지만 RIGHT에 해당하는 dept 테이블이 기준 테이블이 된다. 
LEFT OUTER JOIN의 결과와 다르게 dept 테이블의 모든 데이터가 조회되고 조인 테이블(emp)의 테이블에 데이터가 있을경우 해당 값을 표시한다.
대부분 LEFT OUTER JOIN을 많이 사용하지만 상황에 따라서 RIGHT OUTER JOIN을 사용할 수 있으니 개념을 꼭 이해하고 있어야 한다.

 

아우터 조인을 사용하는 이유는 기준 테이블의 데이터를 누락 없이 모두 조회하고 참조 테이블의 값이 있을 경우 해당 값을 사용하기 위해서이다.

<With>
WITH절이란
WITH절은 오라클9 이후 버전부터 사용이 가능하며 이름이 부여된 서브쿼리라고 생각하시면 됩니다. 임시테이블을 만든다는 관점에서본다면 VIEW와 쓰임새가 비슷한데 차이점이 있다면 VIEW는 한번 만들어놓으면 DROP할때까지 
없어지지 않지만 WITH절의 같은경우 한번 실행할 쿼리문내에 정의되어 있을경우, 그 쿼리문안에서만 실행된다는 차이점이 있습니다. 

 

WITH절을 사용하는 이유
WITH절은 복잡한 SQL에서 동일 블록에 대해 반복적으로 SQL문을 사용하는 경우 그 블록에 이름을 부여하여 재사용 할 수 있게 함으로서 
쿼리 성능을 높일 수 있는데 WITH절을 이용하여 미리 이름을 부여해서 Query Block을 만들 수 있습니다. 
자주 실행되는 경우 한번만 Parsing되고 Plan 계획이 수립되므로 쿼리의 성능향상에 도움이 됩니다.
WITH EXAMPLE AS
(
 SELECT 'WITH절' AS STR1
 FROM DUAL
)

SELECT * FROM EXAMPLE

<DB쿼리>
- DB쿼리 팁
    
> ERD를 보고 식별,비식별관계를 파악 → 식별이면 기본키로 엮을 수 있겠다 생각, 비식별이면 외래키로 엮을 수 있겠다 
    즉, 어쨋든 ERD상에 선이던 실선이던 연결이 직접적으로 되어있다면 JOIN이 손쉽게 키로 가능하다.
> Insert , update 대량작업시 인텔리제이에서 지원하는 기능 사용 → alt 드래그해서 여러 쿼리문 행째로 조작 가능


> intelliJ 데이터베이스에 쿼리 작성시 컬럼에 대고 f2하면 컬럼들이 조회되는데 코멘트 확인 가능
(oracle에는 대부분 컬럼에 코멘트가 작성되어있으니까 오라클db작업창에 대고하면 더 좋음)

