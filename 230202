<js.function()>
자바스크립트에서 함수를 정의하는 방법은 Function객체를 사용하는 방법과 연산자인 function을 사용하는 방법이 있다. 
일반적으로 Function 객체를 사용하는 정의방법은 자주 쓰이진 않는다. 
연산자인 function을 이용한 함수 정의 방식은 함수선언문과 함수표현식으로 나뉜다.
=======================================
//함수선언식(functino declaration)
function company(){
  /* 실행코드 */
}
이와 같은 방식을 함수 선언식이라고 한다.
함수선언식으로 정의된 함수는 자바스크립트 인터프리터가 로딩되는 시점에 바로 초기화하고 이를VO에 저장한다. 그렇게 떄문에
함수 선언의 위치와는 상관없이 소스 내 어느 곳에든지 호출이 가능하다.
함수 정의할 때 "함수는 first-class object이므로 변수에 할당될 수 있다."라는 전제 하에 다른 방식으로도 작성할 수 있다.
#1급객체란 - 다른객체들이 적용가능한 연산을 모두 지원하는 객체 ex)변수에 할당(assignment)할 수 있다.
                                                                다른 함수를 인자(argument)로 전달 받는다.
                                                                 다른 함수의 결과로서 리턴될 수 있다.
var company=function company(){
  /* 실행코드 */
}
var company=function(){
 /* 실행코드 */
};
=> 함수표현식이라고 한다. 함수가 변수에 할당되었으므로 "함수는 객체이다"라는 정의가 가능하다. 함수표현식은 함수 선언식과 달리
스크립트 로딩 시점에 VO를 저장하지 않고 runtime시에 해석되고 실행된다.

<익명 함수 표현식으로 함수를 하나 정의해보고 외부에서 함수내의 변수에 접근해보기>
========================================
//함수 표현식에 의한 명시적인 함수호출
var app = function(){
  console.log("함수호출");
};
app();
=======================================
//즉시실행함수
(function(){
  console.log('함수호출');
 }());
 
 위 두개의 코드는 동일한 동작을 한다.
 함수표현식은 함수를 정의하고, 변수에 함수를 저장하고 실행하는 일련의 과정을 거친다. 하지만 즉시실행함수를 사용하면 
 이와같은 과정을 거치지 않고 즉시 실행된다. 
 
 jQuery나 Prototype라이브러리는 동일한 $라는 글로벌변수를 사용한다. 즉시실행함수의 코드블럭에서 jQuery를 위한 $변수를 사용하고자
 한다면 아래와 같이 파라미터를 전달하는 방법으로 Prototype의 $변수에 대한 overwritting을 예방할 수 있다.
 ======================================
 (function($){
  //함수 스코프 내에서는 $는 jQuery Object임
    console.log($);
 }(jQuery);

=======================================
자바스크립트는 웹브라우저에서 작동하는 스크립트입니다. 기능을 포함하는 거의 모든 홈페이지들이 사용하고 있습니다. 
제이쿼리 또한 역시 자바스크립트입니다. 다만 자바스크립트로 빈번하게 사용되는 기능들은 조금 더 함축적인 코드를 통해 사용하게 만든 라이브러리입니다.
자바스크립트는 아래와 같이 크게 4가지 요소로 구성되어있습니다.

1. 자바스크립트 core 문법

2. 자바스크립트 core 라이브러리

3. 자바스크립트 BOM (Browser Object Model)

4. 자바스크립트 DOM (Document Object Model)

제이쿼리는 이중 자바스크립트 DOM 작업을 쉽게 처리할수있도록 도와주는 라이브러리입니다. 
또한 제이쿼리는 DOM 작업을 쉽게 도와주는 라이브러리일 뿐, 자바스크립트 문법이나 라이브러리를 대체하는 프로그래밍 언어가 아님을 인지해야 합니다.
제이쿼리의 사용법을 잘 알고 있다면개발 속도는 빨라집니다. 하지만 제이쿼리가 항상 자바스크립트보다 우월한 것은 아닙니다.

 

제이쿼리는 어디까지나 자바스크립트를 토대로 만든 것이기 때문에 개발 속도가 아닌 처리 속도 부분에서 성능이 떨어집니다.
제이쿼리 라이브러리를 거치면서 브라우저에 맞는 네이티브 자바스크립트로 변환된 뒤 실행되기 때문입니다.

 
