<백준 저울.java>
문제 예시 3 1 6 2 7 30 1 를 정렬하면 1 1 2 3 6 7 30 이 됩니다.
반복문으로 정렬한 숫자들을 하나씩 더해가면서 누적합을 구합니다.
만약 다음 원소값이 누적합 + 1 보다 크다면 누적합 + 1은 만들지 못하는 무게입니다.
처음에는 누적합까지의 무게는 전부 다 만들 수 있다는 전제가 어떻게 만들어진지 이해가 되지 않았습니다.
그런데 직접 해보면서 손으로도 따라해보니 어렴풋이 이해가 됩니다.
누적합 이라고 생각하지 말고 주어진 무게추들로 만들 수 있는 최댓값 이라고 생각하면 됩니다.
ex)위 예시에서 1 1 2 까지의 누적합은 4 입니다.
1, 2, 3, 4 까지는 주어진 추 세개 1 1 2 로 전부 만들 수 있습니다.
그리고 여기에 새로운 무게추 3 이 추가된다면 누적합은 7 이 됩니다.
4 까지는 전부 만들수 있다는 걸 이전에 확인을 했고
새로운 5, 6, 7 은 각각 2+3, 3+3, 4+3 이 되고 2, 3, 4 는 1 1 2 의 추로 전부 구할 수 있었고 새로 추가된 3 무게추까지 있다면 5, 6, 7을 만들 수 있습니다.
시간복잡도는 정렬이 있기 때문에 O(n * logn) 이고 공간복잡도는 O(n) 

import java.io.*;
import java.util.*;

class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        int[] weight = new int[n];

        for (int i=0; i<n; i++) {
            weight[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(weight);

        int sum = 0;
        for (int i=0; i<n; i++) {
            if (sum + 1 < weight[i]) {
                break;
            }

            sum += weight[i];
        }

        System.out.println(sum + 1);
    }
}

> 웹브라우저는 실행 우선순위에 차이가 있다. 무조건 먼저 들어온다고 먼저 실행하는게 아니고 queue에는 순서대로 담아두지만 실행되서 스택에 올라가는 순서는 다르다
ex) 1+1 명령, 함수 function() 명령, 2+2명령이 있으면 브라우저는 1+1 , 2+2 , function을 실행한다.
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/45d2e21a-8796-4531-8850-174bf272794b/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/01037d12-540a-4c3a-a2fe-6295b0b9d669/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/08d25db9-7261-475e-8f78-3bfce0f49661/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/84d5be0c-4873-4bd1-bead-c768efe39317/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8c77d246-256c-47b3-9b5b-c5fe519fb8dc/Untitled.png)

- DOM
    - HTML의 최상단객체 ( head ,body, footer를 전부다 아우르는 최상단 객체 Document를 일컸는다)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/06c103cb-de6d-4f20-8e7c-eb845bc0dea3/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/edb198b6-dbe4-4f0d-99d2-6a4da353e9a0/Untitled.png)
    
- 호이스팅이란
    - 목적프로그램 : 원시프로그램을 컴파일러를 이용해서 기계어로 번역한 파일 (obj)
    → 목적파일은 cpu가 직접실행하는코드인 기계어로 이루어져있다.
    - **원시 프로그램**
    (source program)이란 [원시 언어](http://wiki.hash.kr/index.php/%EC%9B%90%EC%8B%9C_%EC%96%B8%EC%96%B4) 로 작성된 [프로](http://wiki.hash.kr/index.php/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8)그램으로서, 컴퓨터 하드웨어에서는 직접 처리할 수 없는 언어(즉, [기계어](http://wiki.hash.kr/index.php/%EA%B8%B0%EA%B3%84%EC%96%B4) 이외의 언어)로 쓰여진 프로그램을 말한다. ( 인간이 쓰는 언어)
    
    > 컴파일러와 인터프리터는 고급언어로 작성된 원시 프로그램(Source Program)을 목적 프로그램(Object Program)으로 번역하는 번역 프로그램이며, 프로그램 번역 방식에 따라 구분됩니다.
    > 
    - 컴파일러 : 원시프로그램전체를 목적프로그램(obj)으로 번역한 후 , 링킹작업을 통해 exe를 생성
    - 인터프리터 : 고급 언어로 작성된 프로그램을 한 줄 단위로 받아들여 번역, 번역과 동시에 프로그램을 한줄 단위로 즉시 실행. 프로그램이 직접 실행하므로 obj(목적프로그램)은 생성되지 않음.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1ca8c573-14b7-4c08-86dc-309ff2eac67f/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/679fbaf8-81da-46d3-998a-071285c9ab57/Untitled.png)
    
    <aside>
    😄 JavaScript에서 **호이스팅**
    (hoisting)이란, 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다. `var`
    로 선언한 변수의 경우 호이스팅 시 `undefined`로 변수를 초기화합니다. 반면 `let`과 `const`로 선언한 변수의 경우 호이스팅 시 변수를 초기화하지 않습니다.
    
    </aside>
    
    [자바스크립트(JavaScript) - 변수, 변수 선언, 호이스팅](https://bearcomputer.tistory.com/25)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e37b2718-97c1-4c4e-8e7d-98260377114c/Untitled.png)
    
    > JavaScript는 함수의 코드를 실행하기 전에 함수 선언에 대한 메모리부터 할당합니다. 덕분에 함수를 호출하는 코드를 함수 선언보다 앞서 배치할 수 있습니다. 예를 들어,
    > 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7feaed43-d748-469e-852b-1217383bbb18/Untitled.png)
    
    > 
    > 
    > 
    > ### [let과 const 호이스팅](https://developer.mozilla.org/ko/docs/Glossary/Hoisting#let%EA%B3%BC_const_%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85)
    > 
    > `let`과 `const`로 선언한 변수도 호이스팅 대상이지만, `var`와 달리 호이스팅 시 `undefined`로 변수를 초기화하지는 않습니다. 따라서 변수의 초기화를 수행하기 전에 읽는 코드가 먼저 나타나면 예외가 발생합니다.
    >

제이쿼리 문법
제이쿼리를 사용하면 아주 간편하게 HTML 요소를 선택하고, 그렇게 선택된 요소에 손쉽게 특정 동작을 설정할 수 있습니다.

 

제이쿼리의 기본 문법은 다음과 같습니다.

문법
$(선택자).동작함수();

 

달러($) 기호는 제이쿼리를 의미하고, 제이쿼리에 접근할 수 있게 해주는 식별자입니다.

선택자를 이용하여 원하는 HTML 요소를 선택하고, 동작 함수를 정의하여 선택된 요소에 원하는 동작을 설정합니다.

$() 함수
$() 함수는 선택된 HTML 요소를 제이쿼리에서 이용할 수 있는 형태로 생성해 주는 역할을 합니다.

 

$() 함수의 인수로는 HTML 태그 이름뿐만 아니라, CSS 선택자를 전달하여 특정 HTML 요소를 선택할 수 있습니다.

이러한 $() 함수를 통해 생성된 요소를 제이쿼리 객체(jQuery object)라고 합니다.

제이쿼리는 이렇게 생성된 제이쿼리 객체의 메소드를 사용하여 여러 동작을 설정할 수 있습니다.

Document 객체의 ready() 메소드
자바스크립트 코드는 웹 브라우저가 문서의 모든 요소를 로드한 뒤에 실행되어야 합니다.

보통은 별다른 문제가 발생하지 않지만, 다음과 같은 경우에는 오류가 발생합니다.

 

 - 아직 생성되지 않은 HTML 요소에 속성을 추가하려고 할 경우

 - 아직 로드되지 않은 이미지의 크기를 얻으려고 할 경우

 

다음 예제는 아직 생성되지 않은 HTML 요소에 속성을 추가하는 예제입니다.

예제
function func() {

    addAttribute();  // 아이디가 "para"인 HTML 요소에 속성을 추가함.

    createElement(); // 아이디가 "para"인 HTML 요소를 생성함.

}

function createElement() {

    var criteriaNode = document.getElementById("text");

    var newNode = document.createElement("p") newNode.innerHTML = "새로운 단락입니다.";

    newNode.setAttribute("id", "para");

    document.body.insertBefore(newNode, criteriaNode);

}

function addAttribute() {

    document.getElementById("para").setAttribute("style", "color: red");

}

코딩연습 ▶

 

위의 예제에서 addAttribute() 함수는 아이디가 "para"인 HTML 요소에 새로운 속성을 추가하는 함수입니다.

또한, createElement() 함수는 아이디가 "para"인 HTML 요소를 생성하여 추가해 주는 함수입니다.

 

위의 예제에서는 아이디가 "para"인 HTML 요소가 생성되기 전에 해당 요소에 속성을 추가해 주는 addAttribute() 함수가 호출되므로, Uncaught TypeError가 발생하여 실행중이던 스크립트는 중지될 것입니다.

만약 먼저 호출되는 addAttribute() 함수를 createElement() 함수 뒤에 호출하면, 정상적으로 동작할 것입니다.

 

웹 브라우저에서는 현재 HTML 문서에서 발생한 오류를 F12 버튼으로 확인할 수 있습니다.
 

HTML 요소의 생성과 속성의 추가에 대한 더 자세한 사항은 자바스크립트 노드의 관리 수업에서 확인할 수 있습니다.

 

자바스크립트 노드의 관리 수업 확인 =>

 

그래서 자바스크립트에서는 Window 객체의 onload() 메소드를 이용하여 문서가 모두 로드된 뒤에 코드가 실행되도록 설정합니다.

문법
window.onload = function() {

    자바스크립트 코드;

};

 

마찬가지로 제이쿼리에서는 Document 객체의 ready() 메소드를 이용하여 같은 결과를 보장하고 있습니다.

문법
$(document).ready(function() {

    제이쿼리 코드;

});

 

또한, jQuery Team에서는 같은 결과를 보장하는 더욱 짧은 문법을 다음과 같이 제공하고 있습니다.

문법
$(function() {

    제이쿼리 코드;

});

 

다음 예제는 문서가 모두 로드되는 시점과 창이 모두 로드되는 시점의 차이를 보여주는 예제입니다.

예제
$(document).ready( function() {

    $("#doc").text("문서가 전부 로드됐어요!");

});

$(window).load( function() {

    $("#win").text("창이 모두 로드됐어요!");

});
