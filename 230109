<프로그래머스 2단계 귤고르기>

import java.util.*;
class Solution {
    Map<Integer, Integer> map = new TreeMap<>();
    public int solution(int k, int[] tangerine) {
        int answer = 0;
        
        for (int e : tangerine) {
            map.put(e, map.getOrDefault(e, 0) + 1);
        }
        
        // 개수기준으로 정렬
        List<Integer> keylist = new ArrayList<>(map.keySet());
        Collections.sort(keylist, new customComparator());

        // 정렬된 key리스트에서 값을 하나씩 가져와 k에 빼줌
        for (Integer e : keylist) {
            if (k <= 0) 
                break;
            answer++;
            k -= map.get(e);
        }
        return answer;
    }
    
    public class customComparator implements Comparator<Integer> {
        
        @Override
        public int compare(Integer o1, Integer o2) {
            return map.get(o2).compareTo(map.get(o1));
        }
    }


<프로그래머스 2단계 롤케이크자르기>

처음에는 단순히 두 배열로 풀이했다가 모든 문제가 시간초과가 걸렸다.
HashSet과 HashMap 둘 다 사용하는데, 같은 객체로 보이더라도 다른 자료형을 사용한다는 생각을 가져보도록 해보기

import java.util.*;

class Solution {
    public int solution(int[] topping) {
        int answer = 0;
        int size = topping.length;
        
        HashSet<Integer> first = new HashSet<>();
        HashMap<Integer, Integer> second = new HashMap<>();
        
        first.add(topping[0]);
        for (int i = 1;i < size; i++) {
            second.put(topping[i], second.getOrDefault(topping[i], 0) + 1);
        }
        
        for (int i = 1;i < size; i++) {
            first.add(topping[i]);
            second.put(topping[i], second.get(topping[i]) - 1);
            if (second.get(topping[i]) == 0) {
                second.remove(topping[i]);
            }
            if (first.size() == second.size()) answer++;
        }
        
        
        return answer;
    }
}

<프로그래머스 1단계 최소직사각형 > 

먼저 생각한 것은 주어진 가로, 세로 길이 모두 포함하여 제일 긴 길이는
가로, 세로 어디에 놓아도 제일 긴 쪽이라는 것이다.
그래서 제일 긴 길이를 가진 명함을 찾아 고정 한 후에 생각해 보았다.
생각하다보니 우리가 구하는 것은 명함의 넓이의 최소값이었기 때문에
각 명함마다 가로, 세로 중 긴 부분을 제일 긴 길이를 가진 명함에 대치시킨다면
나머지 짧은 부분들은 어차피 각 명함에서 짧은 부분이기 때문에
이 짧은 부분들의 최대값을 구한다면 제일 긴 길이와 곱하면 최소값이 나왔다.
따라서 , 가장 긴 길이를 가진 명함을 구하고 고정시킨 후
나머지 명함들을 긴 부분은 가장 긴 길이를 가진 명함에 대치시키고 (회전)
각 명함들 중 짧은 부분들을 모아 최대값을 산출함

class Solution {
    public int solution(int[][] sizes) {
        
        int max_row = 0; //가로의 최대 길이
        int max_col = 0; // 세로의 최대 길이
        
        for(int i=0;i<sizes.length;i++){ //긴 부분을 가로로 재배치
            if(sizes[i][0]<sizes[i][1]){
                int tmp = sizes[i][0];
                sizes[i][0] = sizes[i][1];
                sizes[i][1] = tmp;
            }
            if(max_row<sizes[i][0]) max_row = sizes[i][0]; // 최대값
            if(max_col<sizes[i][1]) max_col = sizes[i][1]; // 최대값
        }
        
        return max_col*max_row; //결과
   }   
}


