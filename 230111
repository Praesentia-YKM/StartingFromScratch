<커널이란?>

컴퓨터와 전원을 켜면 운영체제는 이와 동시에 수행된다. 
한편 소프트웨어가 컴퓨터 시스템에서 수행되기 위해서는 메모리에 그 프로그램이 올라가 있어야 한다. 
마찬가지로 운영체제 자체도 소프트웨어로서 전원이 켜짐과 동시에 메모리에 올라가야 한다. 
하지만, 운영체제처럼 규모가 큰 프로그램이 모두 메모리에 올라간다면 한정된 메모리 공간의 낭비가 심할것이다. 
따라서 운영체제 중 항상 필요한 부분만을 전원이 켜짐과 동시에 메모리에 올려놓고 그렇지 않은 부분은 필요할 때 메모리에 올려서 사용하게 된다. 
이 때 메모리에 상주하는 운영체제의 부분을 커널이라 한다. 또 이것을 좁은 의미의 운영체제라고도 한다. 즉 커널은 메모리에 상주하는 부분으로써 운영체제의 핵심적인 부분을 뜻한다. 
이에 반에 넓은 의미의 운영체제는 커널뿐 아니라 각종 시스템을 위한 유틸리티들을 광범위하게 포함하는 개념이다. (보통은 운영체제라고 하면 커널을 말하게 된다.)

'셸(Shell)'은 사용자의 명령어를 해석하고 운영체제가 알아들을 수 있게 지시해주는 것으로, 사용자와 커널을 이어주는 것이다.
'커널(kernel)'은 이와 같은 내용을 받아 하드웨어에 직접적으로 명령을 내려준다.


<프로그래머스 1단계 1분컷 핸드폰 번호 가리기.java>
#for문을 통해 phone_number의 길이만큼 반복
#i가 phone_number의 길이에서 -4를 뺀 수보다 작을때까지 answer변수에 *을 넣어줌
#위조건이 아니라면 .charAt() 메소드를 통해 문자를 하나씩 순서대로 넣어준다.
=> charAt() : String으로 저장된 문자열 중에서 한 글자만 선택해서 char타입으로 변환해주는 녀석

class Solution {
    public String solution(String phone_number) {		 
	    String answer = "";
      for(int i= 0;i<phone_number.length();i++){
        if(i<phone_number.length() -4)
          answer +="*";
        else
          answer += phone_number.charAt(i);
    }
    return answer;
}

다른 솔루션 : StringBuilder사용
StringBuiler란? : 자바에서 String객체는 변경 불가능하다. 한번 생성되면 내용을 바꿀 수 없단 뜻이다.
따라서 하나의 문자열을 다른 문자열과 연결하면 새 문자열이 생성되고, 이전 문자열은 가비지 컬렉터로 들어간다.
메모리의 비효율성이 생긴다는 말이다. 이에 대한 해결방안이 StringBuiler이다. 
이는 변경 가능한 문자열을 만들어 주기 때문에 String과 달리 문자열을 더할때 객체를 생성하는 것이 아니라,
기존의 데이터에 더하는 방식을 사용하기 때문에 속도가 빠르고 상대적으로 부하가 적다.
즉, 긴 문자열을 더하는 상황이 발생할 경우 StringBuilder를 적극적으로 사용한다.

HOW?

먼저 StringBuilder의 객체를 생성한 후, append()의 인자로 연결하고자 하는 문자열을 넣어서 StringBuilder의 객체를 통해 호출한다. 
그리고 출력 시에는 toString()을 붙여야 하고, String 변수에 넣을 때도 마찬가지다.
ex)     StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("문자열 ").append("연결");
//        String str = stringBuilder;   // String에 StringBuilder를 그대로 넣을 순 없다. toString()을 붙여야 한다
        String str = stringBuilder.toString();
        // 두 println()은 같은 값을 출력한다
        System.out.println(stringBuilder);
        System.out.println(str);
이 문제의 StringBuilder를 사용한 솔루션. 하지만 문자열을 더하는 작업이 없기 때문에 구지 할 필요는 없었다.
하지만 StringBuilder사용시 charAt이 아닌 setCharAt을 사용해야 한다.

setCharAt() : 문자열 중에서 특정 위치에 있는 문자열의 값을 교체하는 메서드 

class Solution {
    public String solution(String phone_number) {		 
	StringBuilder answer = new StringBuilder(phone_number);
		 
	for(int i = 0; i < phone_number.length()-4; i++) {
		answer.setCharAt(i, '*');
	}
	return answer.toString();
    }
}
