- (app_dhtmlxApi.js)grid의 헤더 ( 컬럼명 ) 정보 다 가져오기 regrdKey() , indexOf
    
    `var gridKeyStr = mygrid.reGrdKey();`
    
    +
    
    그 안에서 내가 찾고자 하는 문자열 찾는 법
    
    <aside>
    💡 `if (gridKeyStr.indexOf("rowStat") >= 0)`
    
    </aside>
    
    ## **indexOf() 함수**
    
    > string.**indexOf**
    > 
    - indexOf 함수
        - 문자열(string)에서 특정 문자열(searchvalue)을 찾고, 검색된 문자열이 ’첫번째’로 나타나는 위치 index를 리턴합니다.
    - 파라미터
        - **searchvalue** : 필수 입력값, 찾을 문자열
        - **position** : optional, 기본값은 0, string에서 searchvalue를 찾기 시작할 위치
    - 찾는 문자열이 없으면 -1을 리턴합니다. ( 0보다 큰 지 비교하면 됨)
    - 문자열을 찾을 때 대소문자를 구분합니다.
- 컬럼값에 대한 value ⇒ getValue()
    
    <aside>
    💡 `return mygrid.cells(rowId, mygrid.getColIndexById(columName))      .getValue();`
    
    </aside>
    
- JS 객체 다루는 법
    
    ## **❗️객체를 위한 for문 사용법**
    
    **배열과 객체, 반복문을 응용하여 대량의 정보를 다룰 수 있다.객체에서 사용하는 반복문은 for in
        ◦ `for( let key in obj )`
        ◦ `for in`문은 객체안에 모든 키를 찾아 ‘key’라는 변수에 할당한다.배열에서 사용하는 반복문은 for of
        ◦ `for( let el of arr )`
        ◦ `for of` 문은 배열의 ‘index’ 만큼 반복하여 엘리먼트를 ‘el’라는 변수에 할당한다.**
    
    ---
    
    ## **⚡️ 객체(Object)의 메소드(Method)**
    
    ### **❗️Object.keys(obj)**
    
    **객체(object)의 속성(property)의 이름(key)을 배열(array)로 반환(return)한다.**
    
    [Object.keys() - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)
    
    ### **❗️Object.values(obj)**
    
    **객체(object)의 속성(property)의 값(values)을 배열(array)로 반환(return)한다.**
    
    [Object.values() - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values)
    
- 재무 + 회계
    
    재무 : 재물에 관한 업무
    
    회계 : 회사의 경영상황을 여러 이해당사자들에게 수치적으로 표현해주는 것.
    
- 사업코드관리 ( 사업의 크기 비교)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/de7f2a63-e3de-4e3f-a0fb-decab62357d8/Untitled.png)
    
- 예산과목이란
    
    ✔ 예산과목
    예산은 그 내용을 명백히 하기 위하여 일정한 기준에 의하여 구분하게 되는데 세입예산과목과 세출예산과목으로 구분됨.
    
    세입예산과목은 장, 관, 항, 목별로 분류되고, 세출예산과목은 목그룹, 편성목, 통계목별로 분류됨.
    
- 물려있는 값들 생각하기
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/932e93e6-353e-43f5-b86f-2938a75b70cd/Untitled.png)
    
    ⇒ 재원구분이 변경되면 재원사업코드도 변경되야 하는 것처럼
    
    ⇒ 재원사업코드가 변경되어도 재원구분이 변경되어야 한다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/999b05f5-7bdb-4333-a9c3-a7ca661d6083/Untitled.png)
    
- 전표 ( 돈을 어떻게 썻는지 남기는 기록 : 내가 지출쪽 데이터를 바꿨으면 전표도 수정해야 함을 인지해야 한다)
    - 가전표 : `SELECT *FROM EXP_EXP_PRVSLP`
    - 매인 전표: `SELECT *FROM ACC_SLIP`  → slipNo
    - 매인 전표 dts : `SELECT *FROM ACC_SLIPDTS`
- 지출 결의(EXP_RES)에는 SLIP ( 전표 )에 대한 키값들이 들어있다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/999b05f5-7bdb-4333-a9c3-a7ca661d6083/Untitled.png)
    
- NO를 where조건에 걸때는 SEQ를 걸어야지 ACC_YY를 걸필요가 없다
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/193351a3-1115-4e0d-9716-4ef4e75112e2/Untitled.png)
    
    ⇒ 어쩌피 NO안에는 고유의 ACC_YY정보가 들어있다.
    
- 지출 결의에서 사업명 변경시
    
    [ 품의~결의, 전표, 재원 ]자료수정
    
    1. 사업에 대한 정보는 어디서 나오는가?
        
        ```jsx
        SELECT *
        FROM BDG_DTL_BIZ
        WHERE ACC_YY=2023; --010101D DTL_BIZ_CD 찾기
        ```
        
    2. 
    
    SELECT *
    FROM EXP_CST_SBJ
    WHERE EXP_CST_NO=20230000125
    
    SELECT *
    FROM EXP_CST_FRSC
    WHERE EXP_CST_NO=20230000125
    
    SELECT *
    FROM EXP_OACT_SBJ
    WHERE EXP_OACT_NO=20230000136
    
    SELECT *
    FROM EXP_OACT_FRSC
    WHERE EXP_OACT_NO=20230000136
    
    SELECT *
    FROM EXP_RES_FRSC
    WHERE EXP_RES_NO=20230000144;
    
    SELECT *
    FROM ACC_SLIPDTS
    WHERE SLIP_NO=20230000320;
    
- 제이쿼리 ID ,클래스 , NAME접근  ( CSS와 동일)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/812482c3-5e57-4ac6-b247-54e7c812ea9e/Untitled.png)
    
    - JS .filter() 메서드의 활용
    
    array의 함수 중 가장 많이 쓰이는 함수 중 3 대장이라고 할 수 있는 것이 map, filter, reduce인데요. 그중 filter는 활용도가 높은 편이라 어디라고 정해진 곳 없이 사용되는 편.
    
    ## filter 정의
    
    ```jsx
    Array.prototype.filter ( callbackfn [ , thisArg ] )
    ```
    
    filter는 해석 그대로 걸러주는 역할을 하는 함수입니다. 주로 특정 조건을 만족하는 새로운 배열을 필요로 할 때 사용하는 편입니다. SQL로 치면 where절에서 하는 행위를 하는 함수입니다. **ECMA에는 "주어진 배열의 값들을 오름차순으로 접근해 callbackfn을 통해 true를 반환하는 요소를 기준으로 신규 배열을 만들어 반환한다"라고 정의**되어 있습니다. 예제를 통해 filter의 정의를 살펴보면 다음과 같습니다.
    
    ```jsx
    const numbers = [1, 2, 3, 4, 5];
    const result = numbers.filter(number => number > 3);
    
    console.log(numbers);
    // [1, 2, 3, 4, 5];
    
    console.log(result);
    // [4, 5]
    ```
    
    예제 코드는 array를 통해 주어진 값들을 filter를 통해 3 보다 큰 수를 가진 값들을 걸러내는 방법입니다. 물론 for문을 사용해서도 이와 같은 작업을 할 수는 있지만 권장하지는 않습니다. map, filter, reduce와 같은 함수는 기본적으로 순차적으로 값을 접근한다라는 개념을 내포하고 있기 때문에 for문이 가진 순회를 별다른 코드를 작성하지 않고도 사용할 수 있게 해 주기 때문입니다.
    
    ```jsx
    const numbers = [1, 2, 3, 4, 5];
    const result = [];
    
    for (i = 0; i < numbers.length; i++) {
        const number = numbers[i];
    
        if (number > 3) {
            result.push(number);
        }
    }
    
    console.log(result);
    // [4, 5]
    ```
    
    ## filter 사용법
    
    filter를 사용하는 방법은 callbackfn을 통해 주어진 3개의 인자(요소 값, index, 순회하는 대상 객체)를 사용해 Boolean 값인 true 또는 false 값을 반환하는 함수를 등록하는 것입니다.
    
    ```jsx
    const numbers = [1];
    
    numbers.filter((number, index, source) => {
    
        // number: 요소값
        // index: source에서 요소의 index
        // source: 순회하는 대상
    
        console.log(number);
        // 1
    
        console.log(index);
        // 0
    
        console.log(source);
        // [1]
    
        return number > 3;
    });
    ```
    
    filter을 사용하는 경우 주로 number에 해당하는 요소 값을 많이 활용하지만 index와 array도 함께 사용할 수 있습니다. filter 정의에서 다루었던 예제 코드보다는 조금 더 실무에서 많이 사용하는 방법을 보도록 하겠습니다.
    
    ```jsx
    const guys = [
        { name: 'YD', money: 500000 },
        { name: 'Bill', money: 400000 },
        { name: 'Andy', money: 300000 },
        { name: 'Roky', money: 200000 }
    ];
    
    const rich = guys.filter(man => man.money > 300000);
    
    console.log(rich);
    // [{name: "YD", money: 500000}]
    ```
    
    filter는 원시적인 값만 사용할 수 있는 것이 아니라, json과 같은 객체를 사용해 true를 판별할 수 있습니다. 즉 **filter는 javascript에서 사용할 수 있는 모든 형태의 값을 참(true) 또는 거짓(false)으로 분류해 원하는 조건을 만족하는 새로운 배열을 반환할 수 있습니다.**
    
    filter는 filter 자체만으로도 쓰임새가 좋지만 다른 함수와의 조합성도 좋아 map, reduce와 같은 다른 함수와 함께 자주 쓰입니다. 예를 들어 위의 코드는 "300000 이상을 가진 사람들은?"이지만 map을 활용하면 "300000 이상을 가진 사람들의 이름은?"도 만들 수 있습니다.
    
    ```jsx
    const guys = [
        { name: 'YD', money: 500000 },
        { name: 'Bill', money: 400000 },
        { name: 'Andy', money: 300000 },
        { name: 'Roky', money: 200000 }
    ];
    
    const richNames = guys.filter(man => man.money > 300000)
        .map(man => man.name)
    
    console.log(richNames);
    // ["YD", "Bill"]
    ```
    
    filter는 일반적으로 조합을 이용해 사용하는 경우 강력한 힘을 발휘하는 함수 중 하나입니다.
    
    filter를 사용하는 경우 알아두어야 주의사항이 몇 가지 있습니다.
    
    - filter 함수는 객체를 직접 사용하거나 변형시키지 않지만 callbackfn을 통해 수정할 수 있으며 이는 문제를 발생시키는 원인이 됩니다.
    - callbackfn이 호출되는 범위는 callbackfn이 처음 호출되기 이전이며, filter는 순회하는 도중에 추가된 요소는 접근하지 않습니다. 반대로 순회하는 도중 수정이 일어나면 변경된 값이 callbackfn에 전달되고 삭제된 요소는 접근하지 않습니다.
    
    ```jsx
    // array 요소가 추가되는 경우
    const numbers = [1, 2, 3, 4, 5];
    
    const result = numbers.filter(number => {
        numbers.push(number);
        return number > 3;
    });
    
    console.log(result);
    // [4, 5];
    
    // array 요소가 수정되는 경우
    const numbers = [1, 2, 3, 4, 5];
    
    const result = numbers.filter(number => {
        numbers.pop();
        return number > 3;
    });
    
    console.log(result);
    // [];
    ```
    
- for of , for in 차이점 및 사용법
    
    결론부터 말하면`for...of` 는 **배열**의 반복에서 사용되고,`for...in`은 **객체**의 반복에서 사용된다.
    
    ## 💫 for...of
    
    ```yaml
    copy yamlvar arr = [1, 2, 3];
    
    for (var item of arr) {
      console.log(item); // 1, 2, 3
    }
    ```
    
    `for...of` 는 배열을 순환할 때 사용된다.
    
    배열이 아닌 객체에 사용한다면 어떤 결과가 나올까?
    
    ```yaml
    copy yamlvar obj = {
      a: 1,
      b: 2,
      c: 3
    };
    
    for (var item of obj) {
        console.log(item);
    }
    ```
    
    > Uncaught TypeError: obj is not iterable
    > 
    
    반복 불가능하다는 TypeError를 뱉어낸다.
    
    ## 💫 for...in
    
    ```yaml
    copy yamlvar obj = {
      a: 1,
      b: 2,
      c: 3
    };
    
    for (var item in obj) {
      console.log(item) // a, b, c
    }
    ```
    
    `for...in` 은 객체를 순환할 때 사용된다.
    
    객체가 아닌 배열에 사용한다면 어떤 결과가 나올까?
    
    ```yaml
    copy yamlvar arr = [1, 2, 3];
    
    for (var item in arr) {
      console.log(item) // 0, 1, 2
    }
    ```
    
    JavaScript에선 배열도 `Object` 타입으로 인식하기 때문에 결과가 나오긴 나온다.다만 일치하는 값은 아니고 해당 배열의 index가 출력되는 걸 확인할 수 있었다.
    
- JS push()
    
    **`push()`**
     메서드는 배열의 끝에 하나 이상의 요소를 추가하고, 배열의 새로운 길이를 반환합니다.
    
    ```java
    const animals = ['pigs', 'goats', 'sheep'];
    
    const count = animals.push('cows');
    console.log(count);
    // Expected output: 4
    console.log(animals);
    // Expected output: Array ["pigs", "goats", "sheep", "cows"]
    
    animals.push('chickens', 'cats', 'dogs');
    console.log(animals);
    // Expected output: Array ["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]
    ```
    
- JS 숫자 콤마 찍기 함수(사용자지정 fn_ 함수)
    
    ***`appJs***.setNumberField('frscAmt',true);`      
    
    `//재원별금액-숫자,콤마`
    
- .attr() 과 .prop()의 차이
    - a 요소의 href 속성값을 [.attr()](https://www.codingfactory.net/10208)과 .prop()로 가져와서 출력한다.
    
    ```html
    <!doctype html>
    <html lang="ko">
      <head>
        <meta charset="utf-8">
        <title>jQuery</title>
        <script src="//code.jquery.com/jquery-3.3.1.min.js"></script>
      </head>
      <body>
        <p><a href="#">Link</a></p>
        <p>
          <script>
            document.write( $( 'a' ).attr( 'href' ) );
            document.write( '<br>' );
            document.write( $( 'a' ).prop( 'href' ) );
          </script>
        </p>
      </body>
    </html>
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0abf7acb-caaa-4087-ad1a-8bfc03caa976/Untitled.png)
    
- JS 함수의 첫 호출 시점은 페이지 로딩시다
    
    자바스크립트 함수 호이스팅 때문에
    
    <aside>
    💡 **호이스팅(Hoisting)**
    
    호이스팅은 코드를 실행하기 전에 선언된 변수 및 함수를 해당 범위의 맨 위로 이동하는 JavaScript의 메커니즘입니다.
    
    </aside>
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/226440d7-112a-4631-ae1d-56e8770cfe8c/Untitled.png)
    
    따라서 생기는 this의 시점 변화
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ff931e5f-be29-4ff0-b495-f1be03f8f049/Untitled.png)
