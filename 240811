- [ ]  자바의 String 최적화

자바 컴파일러는 다음과 같이 문자열 리터럴을 더하는 부분을 자동으로 합쳐준다.

- 문자열 리터럴 최적화
컴파일 전
    
    ```java
    String helloWorld = "Hello, " + "World!"; 
    ```
    
    컴파일 후  
    
    ```java
    String helloWorld = "Hello, World!"; 
    ```
    

따라서 런타임에 별도의 문자열 결합 연산을 수행하지 않기 때문에 성능이 향상된다.

- String 변수 최적화
    
    > 문자열 변수의 경우 그 안에 어떤 값이 들어있는지 컴파일 시점에는 알 수 없기 때문에 단순하게 합칠 수 없다.
    > 
    
    ```java
     String result = str1 + str2;
    ```
    
    이런 경우 예를 들면 다음과 같이 최적화를 수행한다. (최적화 방식은 자바 버전에 따라 달라진다.)  
    
    ```java
    String result = new StringBuilder().append(str1).append(str2).toString(); 
    ```
    
    참고: 자바 9부터는 StringConcatFactory 를 사용해서 최적화를 수행한다.
    이렇듯 자바가 최적화를 처리해주기 때문에 지금처럼 간단한 경우에는 StringBuilder 를 사용하지 않아도 된다. 대신에 문자열 더하기 연산( + )을 사용하면 충분하다.
    

- String 최적화가 어려운 경우
    
    > 다음과 같이 문자열을 루프안에서 문자열을 더하는 경우에는 최적화가 이루어지지 않는다.
    > 
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/61a5c6bf-7a59-4970-897f-bce1b48b7ca4/4d6085ce-7ab2-411d-9904-7030153e6d78/Untitled.png)
    
    ```
    왜냐하면 대략 다음과 같이 최적화 되기 때문이다. (최적화 방식은 자바 버전에 따라 다르다) 
    
    String result = "";
    
    for (int i = 0; i < 100000; i++) {
    	 result = new StringBuilder().append(result).append("Hello Java").toString();
    }
    
    ```
    
    **반복문의 루프 내부에서는 최적화가 되는 것 처럼 보이지만, 반복 횟수만큼 객체를 생성해야 한다.**
    반복문 내에서의 문자열 연결은, 런타임에 연결할 문자열의 개수와 내용이 결정된다. 이런 경우, 컴파일러는 얼마나 많은 반복이 일어날지, 각 반복에서 문자열이 어떻게 변할지 예측할 수 없다. 따라서, 이런 상황에서는 최적화가 어렵다.
    
- 직접 String Builder를 사용해서 최적화를 해보자
    
    > 객체를 한번만 만들고 10만번 이어붙이기만 하면 된다.
    > 
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/61a5c6bf-7a59-4970-897f-bce1b48b7ca4/48b44318-247e-4dc3-8525-c2109f01f37f/Untitled.png)
    
- StringBuilder를 직접 사용하는 것이 더 좋은 경우(String의 최적화로 인해 StringBuilder를 만들지말고!)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/61a5c6bf-7a59-4970-897f-bce1b48b7ca4/5c523d3f-8534-483b-a21d-4ef345a15461/Untitled.png)

> ### 참고: StringBuilder vs StringBuffer ###
StringBuilder 와 똑같은 기능을 수행하는 StringBuffer 클래스도 있다.
StringBuffer 는 내부에 동기화가 되어 있어서, 멀티 스레드 상황에 안전하지만 동기화 오버헤드로 인해 성능
이 느리다.
StringBuilder 는 멀티 쓰레드에 상황에 안전하지 않지만 동기화 오버헤드가 없으므로 속도가 빠르다.
StringBuffer 와 동기화에 관한 내용은 이후에 멀티 스레드를 학습해야 이해할 수 있다. 지금은 이런 것이 있
구나 정도만 알아두면 된다
>
