- 공통유틸(ComUtil.java)
    - 스트링 치환
    - object형이 null이거나 할때리턴
    - 문자열이 공백값이 있는지 확인
    - 문자열을 숫자로 바꾸어줍니다. null이거나 공백일시 0으로 바꾸어줍니다.
    - 공백을 제거합니다.
    - 스트링 치환
    - Object를 기준으로 replace를 실행한다.
    - 문자열에서 특정문자 삭제
    - 문자열을 숫자로 바꾸어줍니다. null이거나 공백일시 0으로 바꾸어줍니다.
    - 숫자변환가능한 문자열을  LONG으로 변환한다.
    - 숫자변환가능한 문자열을  Double로 변환한다.
    - 객체의 내용을 Map으로 리턴한다.
    - 숫자 금액을 한글머니로 변경
    - 해당문자열을 대문자로 캐시팅해준다.
    - 지정한 자릿수 만큼 앞자리 채움
    - 전화번호에 하이픈 넣기
    - 바이트단위로 한글 문자열 자르기
    - 데이터 컬럼 camelCase로 변환
    - ResultSet을 Row마다 Map에 담고 List에 다시 저장.
- 예산편성 흐름파악2
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61cf6f83-9d29-4d0d-935c-7fae6f745248/Untitled.png)
    
    - 사업코드관리
        
        > 예산편성을 위한 사업정보를 구조화해서 등록하는 화면. 신규 사업을 추진하거나 사업명이 변경된 경우 사업정보를 등록합니다.
        > 
        - 그리드 선택 이벤트(상태변경시 이벤트 발생)→ ( C → U 로 바뀌는 느낌?)
            
            ```jsx
            //선택
            grid0011.reAttachEvent("onSelectStateChanged", function(rowId){
            	fn_search0012();
            });
            ```
            
        - `onFilterStart` 이벤트에서 그리드내에 검색기능 추가
            
            ```jsx
            grid0012.attachEvent("onFilterStart", function(dataLength, data) {
            				if(data[0] != "" && data[0] != null ) {
            					//검색한 문자가 들어있는 배열만 반환
            					const filterMngClsData = selectMngBizData.filter(function(val, index, arr){
            						return (val['mngBizNm'].indexOf(data[0]) != -1);
            					});
            					grid0012.reGridBind(filterMngClsData);
            				}
            				else {
            					//검색 영역에 아무것도 입력하지 않은 경우
            					grid0012.reGridBind(selectMngBizData);
            				}
            			});
            ```
            
        - 저장로직 진행시 고려해야 하는 사항
            - jsp에서 체크사항
                - [ ]  필수 입력 요소 체크
                - [ ]  중복확인(****Object.keys() 메서드 를 통해 데이터 전체 중 key값의 .length가 1이상이면 중복데이터가 잇는 것****
                    - key를 검색하고
                        
                        ```jsx
                        saveCheck = fn_saveCheck('grid0011', grid0011, dataList);
                        
                        var fn_saveCheck = function(gridName , grid, allDataArr, dataList) {
                        //중복체크
                        			if(Object.keys(allDataArr).length > 1) {
                        				//신규추가건이 아닌 경우
                        				result = allDataArr.reduce(function(tmpArr, allGridEl) {
                        					if (!tmpArr[allGridEl[chkKey[0]]]) {
                        						tmpArr[allGridEl[chkKey[0]]] = 0;
                        					}
                        					tmpArr[allGridEl[chkKey[0]]] += 1;
                        					return tmpArr;
                        				}, {});
                        				for(let key in result) {
                        					if(result[key] > 1) {
                        						//중복되는 항목이 존재하는 경우
                        						chkResult = true;
                        					}
                        				}
                        			}
                        }
                        ```
                        
            - sevice에서 체크사항
                - [ ]  그리드의 상태값에 따른 데이터 저장 분류해야 함
            - reduce함수
                
                > // reduce
                
                const numbers = [1, 2, 3, 4];
                > 
                > 
                > numbers.reduce((누산값, 현재요소값, 현재요소의index, 현재배열) => {
                > return 다음누산값;
                > }, 초기누산값);
                > 
                
                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ecb9d6cc-e1f6-4041-ac01-4e4481672881/Untitled.png)
                
                or  
                
                ### reduce함수 안에서 다른 함수 호출하기
                
                한 함수의 계산 값을 입력받아 다른 함수에 넣고, 그 값을 입력받아 또 다른 함수에 넣으려면
                
                - 익명함수 활용
                    
                    <aside>
                    💡 자바스크립트 익명 함수는 함수명 대신 변수명에 함수 코드를 저장하는 구현 방식이다. 익명 함수의 소스 코드는 변수값이므로 끝에 세미콜론 ; 을 대입한다. 익명 함수는 호출 시 변수명을 함수명처럼 사용하면 된다.
                    
                    </aside>
                    
                - 간결하게
                    
                    위의 과정을 보기 가독성있고, 간결하게 정리하는 방법은 없을까?reduce를 활용하여 위에 코드를 정리해보자.
                    
                    ```
                    // 여러가지 함수를 배열에 담는다.
                    let pipeline = [
                      increment,
                      increment,
                      increment,
                      decrement,
                      double,
                      double,
                      halve
                    ];
                    
                    // 배열의 요소를 함수 이름으로 하고
                    // reduce 함수 안에서 그 함수를 호출한다.
                    // 축적된 값은 함수의 전달인자로 전달한다.
                    let final_value = pipeline.reduce(function(acc, fn){
                      return fn(acc);
                    }, initial_value);
                    
                    console.log(final_value); // 6
                    ```
                    
                    위와 같이 reduce의 전달인자로 함수를 받고, 축적된 값을 전달받은 함수의 인자로 반복적으로 받는 로직을 만들어 위에 복잡한 코드를 정리할 수 있겠다.👍
                    
        - 정책 사업 저장시 반영되는 테이블
            
            <aside>
            💡 **/* 정책사업 */
            SELECT *
            FROM BDG_MNG_CLS;**
            
            **/* 단위사업 */
            SELECT *
            FROM BDG_MNG_BIZ;**
            
            **/* 세부사업 */
            SELECT *
            FROM BDG_DTL_BIZ;**
            
            </aside>
            
        - 컬럼의 값 가져오기 함수(많이 쓰임- 상위그리드의 값 가져올때도 이 함수가 쓰임)
            
            `reGetCellRowIdData` → 후 `reSetCellRowIdData` 
            
            ```jsx
            const selectRow = grid0021.getSelectedRowId();
            const dtlBizCd  = grid0021.reGetCellRowIdData(selectRow,"dtlBizCd");
            grid0022.reSetCellRowIdData(nRowId, "uprBizCd", dtlBizCd);
            ```
            
            이런식으로 상위그리드(0021)의 dtlBizCd를 하위 그리드 uprBizCd라는 곳에 뿌린다.
            
    - 예산과목 맵핑관리
        
        <aside>
        💡 SELECT *
        FROM BDG_SBJ_MAP;
        
        </aside>
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b649a81d-e6f7-4820-ae5b-725a56537913/Untitled.png)
        
        > SBJ_DIV : 예산매핑에서 과목구분 ( 공통코드 S14 )
        → 세부사업 / 세입예산 / 세출예산
        PREY_SBJ : 전년도사업코드
        THY_SBJ : 현재년도사업코드
        > 
        
        - 세부사업 선택시 사업코드도 가져오는 JSP로직
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bbdb15b1-cbe8-4f5f-887b-4ec14b2fe430/Untitled.png)
            
            ⇒cellName에 따라 callBack함수만 다르게 지정하고 PopUp을 호출하면 된다.
            
            이때 부여되는 cd : S126은 공통코드/ 기본환경설정코드도 아닌 팝업 자체 DAO에 지정해주는 코드이다.  ⇒ 팝업창 commonPopUp.jsp → PopupDAO로 던지는.
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6fd9d561-00d6-4c02-a9b5-21cec8e8427f/Untitled.png)
            
            ⇒ 사업코드 팝업은 S126인데 ( `PopupSql.executeCommonPopupQueryS126` )
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8f508eb9-cb3a-49d6-9752-f00f4e90d8f8/Untitled.png)
            
            ⇒ 다음과 같이 팝업은 하나인데 그 안에 던지는 콜백함수와 같이 던지는 PARAM을 CD로 구분을 두어서 각각 다른 XML을 호출하게 한다. 
            
            **따라서 맵핑관리쪽 테이블에 꽂히는 사업코드/사업코드명들은 해당ACC_YY(전년이든 올해든 간에)에 해당하는 `BDG_DTL_BIZ` 에서 가져오는 값들이다.**
            
    - 예산편성 마감관리(요구등록)
        
        > 예산을 편성하기 위한 차수 및 요구마감일을 등록하는 화면. 예산편성 차수에 따라 요구마감일까지 예산요구(세입․세출) 등록이 가능합니다.
        
        이때 예산편성마감관리페이지는 신규를 누르면 요구등록 상태로 올라가고, 예산확정처리쪽과 같은 테이블을 보기때문에 확정까지 처리난애들도 그대로 조회에 뜬다. 
        또한 예산 확정처리까지 가려면 그전에 세입예산 요구와 마감을해야 한다. 했으면 이후에 예산확정처리쪽에서 예산확정처리를 눌러주면 된다.
        > 
        
        <aside>
        💡 SELECT *
        FROM `BDG_BDGDGR` ⇒ 예산확정테이블
        
        </aside>
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/62884283-b31c-4924-80fd-dff814b58d6a/Untitled.png)
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8bb6260d-5b10-47ef-88df-975b5ae6fa25/Untitled.png)
        
        ⇒ 예산편성마감관리와, 예산확정처리는 같은 테이블을 쓴다.(`BDG_BDGDGR`). 하지만 화면 상에서는 편성 구분(화면에 ‘상태’ 표기컬럼)이 Y상태 : 요구등록 )이면 예산편성마감관리쪽 그리드에는 값이 꽂히지만. 예산확정처리 조회그리드에는 Y가 걸러서 꽂힌다.
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1d8bd06e-8609-4c60-8248-77f45ddf57fb/Untitled.png)
        
    - 세입예산 요구(요구등록 후 자료 등록하는 곳)
        
        > 세입예산을 편성하기 위한 요구 자료를 등록하는 화면. 회계연도, 예산구분, 회계구분에 따라 세입예산과목별로 등록합니다.
        > 
        
        ⇒ 본예산을 편성하는 경우에는 전년도 예산(`BDG_IMP_LYBDG`)을 가져와서 요구등록 가능하다.
        
        <aside>
        💡 SELECT * 
        FROM `BDG_IBDG_CPL`
        
        </aside>
        
        - 조회에 필요한 테이블
            
            **예산확정테이블**(요구등록일수도 있고 조정,확정일수도있음) `BDG_BDGDGR` 과
            
            **세입예산편성테이블** 과
            
            **전년도 세입예산 테이블** 필요함 (이때 세입과목은 VW_IMP_SBJ)도 해줘야함.
            
    - 예산편성 마감관리(마감)
        
        > 세입․세출예산 요구등록을 마감하는 화면. 요구등록마감을 하면 요구내역이 취합되서 세입․ 세출예산 조정 자료에 반영되고 조정 작업이 가능합니다.
        > 
        
    
- 입력값이 있으면 데이터 파싱 ,없으면 if안탐
    
    CmmUtil.checkNull(param.getReqClodd()).equals("")
    
    ⇒ checkNull은 들어오는 String매개변수가 null이면 공백으로, 아니면 그냥 문자열 그대로 출력. 그리고 그걸 “”과 equals비교.
    
    ```jsx
    if (!CmmUtil.checkNull(param.getReqClodd()).equals("")){
    			param.setReqClodd(param.getReqClodd().replaceAll("-", ""));
    		}
    ```
    
- SR처리를 하는데 해당 건이 배포가 나가야 하는 건이면?
    
    1 ) 해당 기관의 SR을 처리완료로 바꾸고 - ( 어느 날짜 )에 배포 예정입니다. 라고 표시 후 저장
    
    2 ) 그리고 SR을 하나 더 내이름으로 파서 기능개선 으로 넣고 단위배포날짜를 넣는다 . 그리고 등록 
    
    3 ) 또 이제 배포 등록을 미리 등록해두는데 이때 주의사항으로는 기관넣는 부분에 그 해당기관 + 올샵내부개선 을 2개를 넣어야 한다. 이렇게 안하면 그 기관은 정기배포때 반여잉 된다. 단위배포때는 그 기관에 반영해줘야 하기 때문에 넣어놔야함.


- 웹서버와 was구동순서
    
    . 보통 아파치(웹서버)와 톰캣을 예로들어 **웹서버와 WAS 연동 시 동작되는 방식**은 다음과 같다.
    
    1. 서비스를 사용하는 유저가 브라우저를 통해 아파치 웹서버에 요청
    
    2. 아파치 웹서버는 이 요청이 톰캣에서 처리해야하는 요청인지 확인
    
    3. 톰캣에서 처리해야하는 경우 톰캣의 AJP포트에 접속하여 요청건 전달
    
    4. 톰캣은 웹서버로부터 요청을 전달받아 처리 후 다시 웹서버에 전달
    
    5. 아파치 웹서버는 결과값을 사용자에게 전달
    
- 컴파일시 변화 , xml 수정시 서버 재기동 필요없게하기
    
    > java파일은 complie을 통해 class파일이 만들어지고 이를 jvm이 해석하여 어플리케이션이 실행된다.
    > 
    
    > mybatis 환경 설정을 통해 xml 파일들을 parsing하여 이 정보를 가지고 있는 bean을 통해서 해당 쿼리가 실행된다. **이 bean은 어플리케이션 실행시에 bean이 생성되며 Sql 쿼리 문을 저장**해 놓는다.(여기서 말하는 bean은 SqlSessionFactory이다. DB Connection, Transaction, Sql 정보등을 가지고 있다.)
    > 
    > 
    > 따라서 이 bean의 Sql 정보를 변경해주지 않는 이상, xml 파일을 변경하더라도 반영되지 않는 것이다.
    > 
    > 그렇다면 어떻게 변경되는지 알아보기 위해서, 먼저 어떻게 초기화 되는지를 알아야한다.
    > 
    > SqlSessionFactory가 bean으로 등록되는 과정중에 afterPropertiesSet메서드가 호출되면서 buildSqlSessionFactory(); 메서드가 호출된다. 이 과정에서 Sql 관련, Connection 관련 정보들이 세팅된다.
    > 
    > ⇒ 이렇게 구동이 되는게 기본인데 이걸 이제 동적으로 되게 하면 된다.
    > 
    > .xml 변경 이후에 afterPropertiesSet 메서드를 호출하여 xml을 다시 읽고 sqlSessionFactocy에 할당을 해주면서 동적으로 xml을 반영하도록한다. 즉, 
    > mybatis가 사용하는 sqlSessionFactoryBean이 가지고있는 sqlSource를 변경해준다
    > 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9968eb9b-c63b-42b1-b530-291ccf8dd1c3/Untitled.png)
    
- CSS들이 정의 되어 있는 곳
    
    ⇒ content.css / content_new.css
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c2f65f37-d076-47ca-a617-c53192ef11a7/Untitled.png)
    
- SI통테[ 배포등록을 했으면 항상~!! 생각해야 하는 것]
    
    > 무조건 통합테스트 링크가 올라오면(또는 통테 배포 끝나면 기관정보를 통해 통테was에 들어간다) 통테를 하고 시나리오 작성을 하자!!!
    > 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60fd94ad-fccf-4155-beea-675adcfcc2b1/Untitled.png)
    
- 계정과목이란?
    - 계정 : 회계상 거래의 성격을 간단 명료하게 처리할 수 있도록 사전에 정해놓은 자산, 부채, 자본, 수익, 비용의 고유명칭
    - 과목 : 가르치거나 배워야 할 지식 및 경험의 체계를 세분하여 계통을 세운 영역
    
    ⇒ 계정과목 : 미리 정해 놓은 '고유 명칭’
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e9a29cb5-41a6-4821-8dd8-5ebb4bd4dfe0/Untitled.png)
    
- 마이바티스 SELECTONE(=SELECTBYPK)
    
    마이바티스에서 제공하는 **SqlSession 클래스에서는 CRUD를 위한 다양한 메서드를 제공합니다.**
    
    대표적인 select 관련 메서드는 아래 테이블과 같습니다.
    
    | 메서드 | 기능 |
    | --- | --- |
    | List selectList(query_id) | id에 대한 select문을 실행한 후 레코드를 List로 반환합니다. |
    | List selectList(query_id, '조건') | id에 대한 select문을 실행하면서 조건(쿼리문에서 사용할 인자)를 전달합니다. |
    | T selectOne(query_id) | id에 대한 select문을 실행한 후 한개의 레코드를 지정한 타입으로 반환합니다. |
    | T selectOne(query_id, '조건') | id에 대한 select문을 실행하면서 조건(쿼리문에서 사용할 인자)를 전달합니다. |
    
    ⇒ 하나의 레코드 반환 : selectone
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7f77ca3e-43bd-46b7-abd4-0d6a60f24bde/Untitled.png)
    
    레코드(record)는 SQL에서 행(row) 또는 튜플(tuple)이라고 불린다.
    
    - 레코드 삽입 - INSERT
    
    ```
    > INSERT INTO [테이블명] (컬럼명1, 컬럼명2 ...)
                  VALUES (삽입할 데이터값1, 삽입할 데이터값2...);
    
    ```
    
    레코드를 삽입하는 INSERT문에서 중요한 부분은 컬럼명의 개수와 데이터값의 개수가 일치해한다. 또한 각 컬럼에 지정된 데이터 타입과 데이터값의 타입이 일치해야하며, 컬럼의 순서와 삽입할 데이터값의 순서도 일치해야한다. 만약 특정 컬럼의 데이터값을 NULL 혹은 비워두고싶다면, 데이터값을 NULL로 지정해주거나 INSERT문에서 특정컬럼명을 제외하고 작성해주면 된다. [[1]](http://wiki.hash.kr/index.php/%EB%A0%88%EC%BD%94%EB%93%9C#cite_note-.E7.84.A1.E6.89.80.E6.9C.89-1)
    
    - 레코드 삭제 - DELETE
    
    ```
    > DELETE FROM [테이블명] WHERE [조건];
    
    ```
    
    레코드를 삭제하는 DELETE문에선 WHRER문을 이용하여 특정 레코드를 지정해줘야한다. 조건을 지정하지않으면 해당 테이블에 있는 모든 레코드가 삭제되기 때문에 주의해서 사용해야한다. 또한 삭제 기능은 데이터베이스를 따로 백업해두지않은 이상 복원할 수 없기 때문에 사용시 신중해야한다. [[1]](http://wiki.hash.kr/index.php/%EB%A0%88%EC%BD%94%EB%93%9C#cite_note-.E7.84.A1.E6.89.80.E6.9C.89-1) [[2]](http://wiki.hash.kr/index.php/%EB%A0%88%EC%BD%94%EB%93%9C#cite_note-everdevel-2)
    
    - 레코드 수정 - UPDATE
    
    ```
    > UPDATE [테이블명] SET [컬럼명] = [변경할 데이터값1], ... WHERE [조건];
    ```
    
- 예산편성 흐름파악1
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61cf6f83-9d29-4d0d-935c-7fae6f745248/Untitled.png)
    
    - 회계구분관리
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/910fa456-32de-469e-ab4a-fb31abdb8a21/Untitled.png)
        
        - 그리드 내에 콤보박스 만들기
            
            ```jsx
            var combo_useYn = grid0011.getReColumnCombo(grid0011.getColIndexById('useYn'));	//컬럼의 index 지정하여 콤보를 가져옴
            		combo_useYn.addOption(comboList.useYn);	//콤보박스에 options 지정
            ```
            
        - 저장로직 시작할때 사용해야 하는 함수 ( 유효성 검증 , editstop)
            
            ```jsx
            mygrid.editStop();
            		if (mygrid.gridValidObject.length == 0) {
            			return true;
            		}
            ```
            
        - 저장하시겠습니까?
            
            ```jsx
            //var yesNo=confirm("저장 및 변경하시겠습니까?");
            		var yesNo=confirm("<allsharp:message msgId='SYS.MSG.002' />");
            
            		if (yesNo){
            				저장로직
            
            		}
            ```
            
        - 자바 STRING 변환 방법 2가지
            
            > 두 메소드 모두 Object의 값을 String으로 변환하지만 변경하고자 하는Object가 null인 경우 다르다.
            > 
            > 
            > **toString()과 같은 경우 Null PointerException(NPE)을 발생**시키지만 **valueOf는 "null"이라는 문자열로 처리**한다.
            > 
            > 즉 비교해서 정리하자면
            > 
            > - String.valueOf() - 파라미터가 null이면 문자열 "null"을 만들어서 반환한다.
            > - toString() - 대상 값이 null이면 NPE를 발생시키고 Object에 담긴 값이 String이 아니여도 출력한다.
        - 그리드에 할당한 컬럼명들이 뭔 값인지 모르겠을때 알아내는 방법
            
            일단 그리드에 찍힌 값들은 param으로 컨트롤러, 서비스에 VO객체에 담겨(requestBody에 의하여 자바객체로) 날아가기 때문에  DB.XML문을 보면 된다!
            
            ⇒ 이때 주의해야 하는 사항은 별칭도 VO매핑이 된다!
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8ace5a35-3d35-4723-8c29-df9eca3273cf/Untitled.png)
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f424a0a6-f258-48fb-92eb-f6084a6c83c1/Untitled.png)
            
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/954b6b34-98e9-4f1c-9926-92327e52485d/Untitled.png)
        
        - 저장시 reGetSelectObject() (이를 통해 부모그리드의 데이터를 먼저 저장하고 자식그리드의 저장로직이 실행되도록 걸 수 있다)
            
            ```jsx
            
            //회계분류 저장
            		if(grid0011.reGetSelectObject().rowStat == "C"){
            			alert("회계분류 데이터를 먼저 저장해야 합니다.")
            			return;
            		}
            ```
            
        - 저장시 현재 그리드의 변경사항을 배열형태로 반환( 저장 파라미터로 넘길 datalist생성하는 부분)
            
            ```jsx
            var dataList=grid0012.reGetRowsUpdateData();
            ```
            
    - 세입예산과목 관리
        - [ ]  `BDG_IBDG_SBJ`
        
        <aside>
        💡 세입예산을 편성하기 위한 세입예산과목을 등록하는 화면. 회계연도별로 세입예산을 편성하려면 세입예산과목이 등록되어 있어야 합니다.
        
        </aside>
        
        수입 = (돈을 얻는 행위 ↔ 지출의 반대말)
        
        > 세입예산은 지방자치단체의 1회계연도에 발생할 금전적 수입을 미리 견적하고 이를 예산서에 금액으로 표기한 것으로, 지방자치단체의 수입이 세입이 되기 위해서는 예산의 편성과 의결과정을 거쳐 예산서에 반영되어야 합니다. 따라서 지방자치단체의 수입이 세입으로 예산서에 반영되지 않으면 그 수입은 지출할 수 없게 됩니다. 그 이유는 예산편성시 세입과 동일한 금액을 세출에 편성하게 되며 지방자치단체의 모든 지출은 세출예산에 편성된 범위에서 지출이 허용되므로 결론적으로 세입예산에 반영되지 않는 금전적 수입은 지출할 수 없게 됩니다.
        > 
        
        ⇒ 수입과 세입의 개념
        
        <aside>
        💡 세의 한자 뜻은 해 세([歲](https://hanja.dict.naver.com/hanja?id=10083)
        )다. 한 해를 말한다. 한 해(한 회계기간) 동안의 뜻을 내포하고 있다. 즉, 일정한 기간 내의 수입과 지출 금액이다. 일정한 기간이란 한 회계연도이다. 
        
        즉, 한 해의 수입(들어오는 돈) = 세입
        
        </aside>
        
        - 그리드에 찍힌 모든 데이터 다 가져오기 ( reGetRowsAllSendData0) [ 주로 중복체크할때 사용 ]
            
            ```jsx
            let grid0011AllData = grid0011.reGetRowsAllSendData();
            ```
            
            자바스크립트의 reduce함수는 배열의 각 요소를 순회하며 callback함수의 실행 값을 누적하여 하나의 결과값을 반환 합니다.
            
            ```jsx
            arr.reduce(callback[, initialValue])
            ```
            
            ### 파라미터
            
            1. callback function
                - 다음 4가지의 인수를 가집니다.
                    1. **accumulator** accumulator는 callback함수의 반환값을 누적합니다.
                    2. **currentValue** 배열의 현재 요소
                    3. **index**(Optional) - 배열의 현재 요소의 인덱스
                    4. **array**(Optional) - 호출한 배열
                - callback함수의 반환 값은 accumulator에 할당되고 순회중 계속 누적되어 최종적으로 하나의 값을 반환합니다.
            2. initialValue(Optional)
                - 최초 callback함수 실행 시 accumulator 인수에 제공되는 값, **초기값을 제공하지 않을경우 배열의 첫 번째 요소를 사용하고, 빈 배열에서 초기값이 없을 경우 에러가 발생합니다.**
        - 저장시 중복체크 하는 방법 ( 데이터를 하나의 객체에 다 담고, 그 데이터를 하나하나 key , value( =1 )화 시킨다. 이때 같은 이름의 데이터가 있으면 value가 ++된다.  ⇒ 그 다음 이 result의 value가 1보다 큰 놈이 있으면 중복이 된다고 표시하면 된다.
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bf0a508e-5c6d-4fd4-8ca6-db494d25e69e/Untitled.png)
            
            ```jsx
            //중복체크
            	let chkOverlap = false;
            	let grid0011AllData = grid0011.reGetRowsAllSendData();
            	if(Object.keys(grid0011AllData).length > 1) {
            		const result = grid0011AllData.reduce(function(tmpArr, allGridEl) {
            			if (!tmpArr[allGridEl['impSbj']]) {
            				tmpArr[allGridEl['impSbj']] = 0;
            			}
            			tmpArr[allGridEl['impSbj']] += 1;
            
            			return tmpArr;
            		}, {});
            
            		for(let key in result){
            			if(result[key] > 1) {
            				alert("중복되는 과목코드가 존재합니다.");
            				chkOverlap = true;
            			}
            		}
            	}
            ```
            
        - 저장 로직 성공시 반환되는 resultData의 구조
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e82ebde0-7d5a-4cb1-95ae-972e90c24614/Untitled.png)
            
            ⇒ { {   }  , {   } } 형태인데  반환되는 데이터의 값과 성공했는지 유무를 y/n으로 나타내주는 객체이다.
            
        - 저장 시 신규 저장이 아닌, 과목명 명칭 변경 후 저장일떄 ( 즉 Insert가 아닌 update인 상황일때)
            
            
- 분개
    
    분개(회계처리) : 차변에는 뭐가 들어가고 대변에는 뭐가 들어가는지 결정
    그 과정에서 계정과목을 무엇으로 정할지를 결정하고 금액을 얼마로 해야 할지를 계산하는 것.
