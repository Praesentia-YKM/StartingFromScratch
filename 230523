**`httpsend`**는 JSP(JavaServer Pages)에서 사용되는 사용자 정의 태그(lib 폴더에 저장된 .tld 파일을 통해 선언) 중 하나입니다. 이 태그는 HTTP 요청을 보내고 응답을 받는 기능을 제공합니다.

**`httpsend`** 태그를 사용하여 다른 서버로 HTTP 요청을 보낼 수 있으며, 주로 웹 서비스와의 통신이나 외부 API 호출 등에 사용됩니다. **`httpsend`** 태그는 주어진 URL에 대해 GET 또는 POST 방식의 요청을 보낼 수 있으며, 요청에 필요한 파라미터와 헤더 등을 설정할 수 있습니다.

아래는 **`httpsend`** 태그의 예시입니다:

```
jspCopy code
<%@ taglib prefix="http" uri="http://example.com/tags/http" %>

<http:httpsend url="http://api.example.com/data" method="GET" var="response">
    <http:param name="param1" value="value1" />
    <http:param name="param2" value="value2" />
    <http:header name="Content-Type" value="application/json" />
</http:httpsend>

<%-- response 변수를 사용하여 응답 데이터 처리 --%>
<p>응답 데이터: ${response}</p>

```

위의 예시에서는 **`httpsend`** 태그를 사용하여 **`http://api.example.com/data`** URL로 GET 요청을 보냅니다. 요청에는 **`param1`**과 **`param2`**라는 파라미터가 포함되고, **`Content-Type`** 헤더는 **`application/json`**으로 설정됩니다. 응답은 **`response`**라는 변수에 저장되며, 이를 JSP 페이지에서 사용하여 응답 데이터를 처리할 수 있습니다.

**`httpsend`** 태그는 주로 외부 서비스와의 통신이 필요한 경우에 사용됩니다. 이를 통해 JSP 페이지에서 다른 서버의 API를 호출하고, 응답을 받아와서 필요한 작업을 수행할 수 있습니다. 자세한 사용 방법은 해당 사용자 정의 태그의 문서나 관련 자료를 참고하시기 바랍니다.
- 기본개념
    
    자바스크립트의 `filter` 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환합니다. `includes` 메서드는 배열이 특정 요소를 포함하고 있는지 판별합니다.
    
    예를 들어, `numbers` 배열이 있고 5보다 큰 숫자를 포함하는 새 배열을 만들고 싶다면 다음을 수행할 수 있습니다.
    
    **코드 스니펫**
    
    ```
    const numbers = [1, 2, 3, 4, 5, 6, 7, 8];
    
    const greaterThan5 = numbers.filter(number => number > 5);
    
    console.log(greaterThan5); // [6, 7, 8]
    
    ```
    
    `includes` 메서드를 사용하여 배열이 특정 값을 포함하고 있는지 확인할 수도 있습니다. 예를 들어, `numbers` 배열이 있고 5가 포함되어 있는지 확인하려면 다음을 수행할 수 있습니다.
    
    **코드 스니펫**
    
    ```
    const includes5 = numbers.includes(5);
    
    console.log(includes5); // true
    
    ```
    
    `filter` 메서드와 `includes` 메서드를 함께 사용하여 특정 조건을 충족하는 배열을 만들 수 있습니다. 예를 들어, `numbers` 배열이 있고 5보다 크고 7보다 작은 숫자를 포함하는 새 배열을 만들고 싶다면 다음을 수행할 수 있습니다.
    
    **코드 스니펫**
    
    ```
    const numbers = [1, 2, 3, 4, 5, 6, 7, 8];
    
    const between5And7 = numbers.filter(number => number > 5 && number < 7);
    
    console.log(between5And7); // [6]
    ```
    

### FOR문으로 비교할때,

---

```sql
for (var i = 0; i < godList.length; i++) {
        for (let j = 0; j < selectedDataObj.length; j++) {

            if (selectedDataObj[j].godSeq == godList[i].godSeq) {
                alert("<allsharp:message msgId='ACC.EXP.073'/>");//중복된 물품은 추가할수 없습니다.
                return;
            }
        }
    }
```

### filter함수로 배열뽑아서 비교할때,

---

```sql
const filter = selectedDataObj.filter(data => godList.includes(data.godSeq));
```

### some함수로 작성할때,

---

```sql
if(selectedDataObj.some(data => godList.includes(data.godSeq))){
        alert("<allsharp:message msgId='ACC.EXP.073'/>");//중복된 물품은 추가할수 없습니다.
        return;
    }
```
