**`httpsend`**는 JSP(JavaServer Pages)에서 사용되는 사용자 정의 태그(lib 폴더에 저장된 .tld 파일을 통해 선언) 중 하나입니다. 이 태그는 HTTP 요청을 보내고 응답을 받는 기능을 제공합니다.

**`httpsend`** 태그를 사용하여 다른 서버로 HTTP 요청을 보낼 수 있으며, 주로 웹 서비스와의 통신이나 외부 API 호출 등에 사용됩니다. **`httpsend`** 태그는 주어진 URL에 대해 GET 또는 POST 방식의 요청을 보낼 수 있으며, 요청에 필요한 파라미터와 헤더 등을 설정할 수 있습니다.

아래는 **`httpsend`** 태그의 예시입니다:

```
jspCopy code
<%@ taglib prefix="http" uri="http://example.com/tags/http" %>

<http:httpsend url="http://api.example.com/data" method="GET" var="response">
    <http:param name="param1" value="value1" />
    <http:param name="param2" value="value2" />
    <http:header name="Content-Type" value="application/json" />
</http:httpsend>

<%-- response 변수를 사용하여 응답 데이터 처리 --%>
<p>응답 데이터: ${response}</p>

```

위의 예시에서는 **`httpsend`** 태그를 사용하여 **`http://api.example.com/data`** URL로 GET 요청을 보냅니다. 요청에는 **`param1`**과 **`param2`**라는 파라미터가 포함되고, **`Content-Type`** 헤더는 **`application/json`**으로 설정됩니다. 응답은 **`response`**라는 변수에 저장되며, 이를 JSP 페이지에서 사용하여 응답 데이터를 처리할 수 있습니다.

**`httpsend`** 태그는 주로 외부 서비스와의 통신이 필요한 경우에 사용됩니다. 이를 통해 JSP 페이지에서 다른 서버의 API를 호출하고, 응답을 받아와서 필요한 작업을 수행할 수 있습니다. 자세한 사용 방법은 해당 사용자 정의 태그의 문서나 관련 자료를 참고하시기 바랍니다.
- 기본개념
    
    자바스크립트의 `filter` 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환합니다. `includes` 메서드는 배열이 특정 요소를 포함하고 있는지 판별합니다.
    
    예를 들어, `numbers` 배열이 있고 5보다 큰 숫자를 포함하는 새 배열을 만들고 싶다면 다음을 수행할 수 있습니다.
    
    **코드 스니펫**
    
    ```
    const numbers = [1, 2, 3, 4, 5, 6, 7, 8];
    
    const greaterThan5 = numbers.filter(number => number > 5);
    
    console.log(greaterThan5); // [6, 7, 8]
    
    ```
    
    `includes` 메서드를 사용하여 배열이 특정 값을 포함하고 있는지 확인할 수도 있습니다. 예를 들어, `numbers` 배열이 있고 5가 포함되어 있는지 확인하려면 다음을 수행할 수 있습니다.
    
    **코드 스니펫**
    
    ```
    const includes5 = numbers.includes(5);
    
    console.log(includes5); // true
    
    ```
    
    `filter` 메서드와 `includes` 메서드를 함께 사용하여 특정 조건을 충족하는 배열을 만들 수 있습니다. 예를 들어, `numbers` 배열이 있고 5보다 크고 7보다 작은 숫자를 포함하는 새 배열을 만들고 싶다면 다음을 수행할 수 있습니다.
    
    **코드 스니펫**
    
    ```
    const numbers = [1, 2, 3, 4, 5, 6, 7, 8];
    
    const between5And7 = numbers.filter(number => number > 5 && number < 7);
    
    console.log(between5And7); // [6]
    ```
    

### FOR문으로 비교할때,

---

```sql
for (var i = 0; i < godList.length; i++) {
        for (let j = 0; j < selectedDataObj.length; j++) {

            if (selectedDataObj[j].godSeq == godList[i].godSeq) {
                alert("<allsharp:message msgId='ACC.EXP.073'/>");//중복된 물품은 추가할수 없습니다.
                return;
            }
        }
    }
```

### filter함수로 배열뽑아서 비교할때,

---

```sql
const filter = selectedDataObj.filter(data => godList.includes(data.godSeq));
```

### some함수로 작성할때,

---

```sql
if(selectedDataObj.some(data => godList.includes(data.godSeq))){
        alert("<allsharp:message msgId='ACC.EXP.073'/>");//중복된 물품은 추가할수 없습니다.
        return;
    }
```


-- 프로시저 읽는 법 --
### 프로시저에서의 변수 선언 방법 → DECLARE

---

> **`DECLARE x INT;`**는 프로시저 내에서 변수 **`x`**를 선언하는 구문입니다. 이 구문은 변수 **`x`**가 프로시저 내에서 사용될 수 있도록 메모리를 할당하고 해당 변수의 데이터 형식을 정의합니다.
> 
> 
> **`INT`**는 변수 **`x`**의 데이터 형식을 나타내며, 일반적으로 정수형 데이터를 저장하는 데 사용됩니다. 다른 데이터 형식인 **`VARCHAR`**, **`DATE`**, **`FLOAT`** 등도 사용할 수 있습니다. **`DECLARE`** 문을 사용하여 변수를 선언할 때 변수의 이름과 데이터 형식을 지정해야 합니다.
> 
> **`SET x := 10;`**은 변수 **`x`**에 값을 할당하는 구문입니다. **`:=`**는 할당 연산자로 사용되며, 오른쪽 피연산자인 **`10`**의 값을 변수 **`x`**에 할당합니다. 이를 통해 변수 **`x`**에 10이라는 값을 저장할 수 있습니다.
> 
> 따라서 **`DECLARE x INT; SET x := 10;`**는 프로시저 내에서 변수 **`x`**를 선언하고, 그 변수에 10이라는 값을 할당하는 작업을 수행하는 코드입니다. 이후에는 변수 **`x`**를 사용하여 프로시저의 로직을 구현할 수 있습니다.
> 

### 프로지서에서 SELECT @X와 같은 형식의 문법은 무슨 의미일까?

---

> 프로시저에서 `SELECT @x`는 변수 `x`를 참조하는 것을 의미합니다. `@x`는 데이터베이스 시스템에서 변수를 식별하기 위한 기호로 사용되는 것입니다. 프로시저 내에서 변수 `x`에 할당된 값을 조회하기 위해 `SELECT @x`와 같은 구문을 사용할 수 있습니다.
> 
> 
> 예를 들어, 다음은 MySQL에서 프로시저 내에서 변수 `x`를 조회하는 예입니다:
> 
> ```
> CREATE PROCEDURE sample_procedure()
> BEGIN
>     DECLARE x INT;
>     SET x := 10;
> 
>     -- 변수 x의 값을 조회
>     SELECT @x;
> END;
> 
> ```
> 
> 위의 예제에서 `DECLARE` 문을 사용하여 `x`라는 변수를 선언하고, `SET` 문을 사용하여 `x` 변수에 10이라는 값을 할당합니다. 그런 다음 `SELECT @x`를 사용하여 변수 `x`에 할당된 값을 조회합니다. `@x`는 `x` 변수를 참조하는데 사용되는 식별기호로 해석됩니다.
> 
> 따라서 `SELECT @x`는 프로시저 내에서 변수 `x`에 할당된 값을 반환하는 역할을 합니다.
> 

### 프로시저는 약간 여러개의 쿼리를 돌리는 느낌으로 쓰이는건가?

---

> 네, 프로시저는 여러 개의 쿼리와 로직을 함께 그룹화하여 실행하는데 사용됩니다. 프로시저는 데이터베이스 내에서 저장된 프로그램이며, 일련의 작업을 수행하는 데 사용됩니다. 일반적으로 프로시저는 데이터베이스 내에서 로직을 중앙 집중화하고, 재사용성을 높이며, 보안을 강화하는 등의 장점을 제공합니다.
> 
> 
> 프로시저 내에서는 여러 개의 SQL 쿼리문을 실행할 수 있습니다. 이러한 쿼리문은 데이터의 조회, 추가, 수정, 삭제 등의 작업을 수행하거나, 데이터베이스 객체의 생성, 수정, 삭제 등과 관련된 작업을 수행할 수 있습니다. 프로시저는 이러한 쿼리문을 연속적으로 실행하거나 조건에 따라 분기하여 필요한 작업을 수행할 수 있습니다.
> 
> 또한, 프로시저 내에서 변수를 선언하고 조건문(IF 문), 반복문(LOOP 문), 예외 처리(TRY-CATCH 문) 등과 같은 제어 구문을 사용하여 로직을 제어할 수도 있습니다. 이를 통해 프로시저는 데이터베이스의 복잡한 작업을 단순화하고 효율적으로 처리할 수 있습니다.
> 
> 프로시저는 데이터베이스 시스템에서 로직의 재사용성과 일관성을 제공하기 위해 주로 사용됩니다. 또한, 프로시저는 트랜잭션 관리, 보안 제어, 성능 향상 등의 목적으로도 사용될 수 있습니다.
> 

### 프로시저 예시

---

> 다음은 예시로서 프로시저의 목적과 함께 설명하는 간단한 예입니다:
> 
> 
> **목적:** 특정 조건을 만족하는 주문 데이터를 조회하고, 해당 주문의 상태를 변경하는 프로시저입니다.
> 
> ```
> CREATE PROCEDURE process_order(IN p_order_id INT)
> BEGIN
>     DECLARE v_order_status VARCHAR(20);
> 
>     -- 주문 상태 조회
>     SELECT status INTO v_order_status
>     FROM orders
>     WHERE order_id = p_order_id;
> 
>     -- 주문 상태에 따른 로직 분기
>     IF v_order_status = 'Pending' THEN
>         -- 주문 상태를 'In Progress'로 변경
>         UPDATE orders
>         SET status = 'In Progress'
>         WHERE order_id = p_order_id;
> 
>         -- 추가 로직 수행
>         -- ...
>     ELSEIF v_order_status = 'In Progress' THEN
>         -- 주문 상태를 'Completed'로 변경
>         UPDATE orders
>         SET status = 'Completed'
>         WHERE order_id = p_order_id;
> 
>         -- 추가 로직 수행
>         -- ...
>     ELSE
>         -- 주문 상태가 유효하지 않을 경우 에러 처리
>         SIGNAL SQLSTATE '45000'
>         SET MESSAGE_TEXT = 'Invalid order status.';
>     END IF;
> 
>     -- 결과 반환
>     SELECT *
>     FROM orders
>     WHERE order_id = p_order_id;
> END;
> 
> ```
> 
> 위의 예시 프로시저는 `process_order`라는 이름을 가지며, 주문 데이터를 처리하는 목적을 가지고 있습니다. 프로시저는 `p_order_id`라는 입력 매개변수를 받아 해당 주문의 상태를 조회하고, 주문 상태에 따라 적절한 로직을 수행합니다.
> 
> 프로시저 내에서는 주문 상태를 조회하기 위해 `SELECT` 문을 사용하고, 주문 상태에 따라 `IF` 문을 사용하여 분기합니다. 주문 상태가 'Pending'인 경우 주문 상태를 'In Progress'로 변경하고, 주문 상태가 'In Progress'인 경우 주문 상태를 'Completed'로 변경합니다. 그 외의 주문 상태는 유효하지 않다고 판단되면 에러를 처리합니다.
> 
> 프로시저는 마지막으로 변경된 주문 정보를 조회하여 반환합니다. 이 예시에서는 주문 데이터베이스 테이블을 사용하였지만, 실제 환경에서는 해당 데이터베이스에 맞게 테이블 및 필드 이름을 수정하여 사용해야 합니다.
> 
> 이 예시에서는 주문 데이터의 상태를 처리하는 프로시저로, 주문 상태에 따라 로직을 분기하여 작업을 수행합니다. 이를 통해 주문 관련 작업을 프로시저로 묶어서 일관성 있게 처리할 수 있습니다.
> 

### 위에 들어준 예시에서 주문상태에 따라 조건별로 분기처리를 해놨잖아 이건 프로시저가 아니고 SELECT쿼리의 반환값을 서비스딴에서 LIST로 받아서 분기처리해줘도 같은 로직의 코드가 되는건가?

---

> 네, 말씀하신대로 SELECT 쿼리의 반환값을 서비스 단에서 받아와 분기 처리하는 것도 가능합니다. 프로시저를 사용하는 것과 서비스 단에서 SELECT 쿼리의 결과를 받아와 처리하는 것은 로직의 구현 방식이 다를 뿐, 비슷한 결과를 얻을 수 있는 방법입니다.
> 
> 
> 예시로 제시한 프로시저를 서비스 단에서 구현한다고 가정해보겠습니다. 서비스 단에서는 다음과 같이 로직을 구현할 수 있습니다:
> 
> ```java
> public List<Order> processOrder(int orderId) {
>     Order order = getOrderById(orderId);  // 주문 정보 조회
>     String orderStatus = order.getStatus();  // 주문 상태 확인
> 
>     if (orderStatus.equals("Pending")) {
>         // 주문 상태를 'In Progress'로 변경
>         order.setStatus("In Progress");
>         updateOrder(order);
> 
>         // 추가 로직 수행
>         // ...
>     } else if (orderStatus.equals("In Progress")) {
>         // 주문 상태를 'Completed'로 변경
>         order.setStatus("Completed");
>         updateOrder(order);
> 
>         // 추가 로직 수행
>         // ...
>     } else {
>         throw new IllegalArgumentException("Invalid order status.");
>     }
> 
>     // 결과 반환
>     return getAllOrders();
> }
> 
> ```
> 
> 위의 예시는 Java 언어를 사용하여 서비스 단에서 주문 데이터를 처리하는 로직을 구현한 것입니다. 서비스 단에서는 주문 데이터를 조회하고 주문 상태에 따라 분기 처리를 수행합니다. 이를 위해 주문 객체를 조회하고 상태를 확인한 후, 상태에 따라 필요한 작업을 수행합니다. 마지막으로 변경된 모든 주문 데이터를 반환합니다.
> 
> 이렇게 서비스 단에서 SELECT 쿼리의 결과를 받아와 분기 처리하는 것도 가능합니다. 프로시저를 사용할 때와 마찬가지로 주문 데이터의 상태에 따라 로직을 분기하여 작업을 수행할 수 있습니다. 다만, 프로시저를 사용하는 경우에는 데이터베이스 내에서 로직을 중앙 집중화할 수 있고, 재사용성과 일관성을 높일 수 있습니다. 반면에 서비스 단에서 분기 처리하는 경우에는 언어나 프레임워크의 기능을 활용하여 로직을 구현하게 됩니다.
> 
> 따라서 선택적으로 사용할 수 있는 방법이며, 어떤 방식을 선택할지는 프로젝트의 요구사항과 개발 환경에 따라 결정하면 됩니다.
> 

### 프로시저의 반환값

---

> 프로시저의 반환값은 프로시저가 실행된 후에 생성되는 결과 세트나 출력 매개변수를 통해 나타낼 수 있습니다. 반환값은 프로시저가 완료된 후 호출자에게 제공되며, 호출자는 이 값을 사용하여 필요한 작업을 수행할 수 있습니다.
> 
> 
> 프로시저의 반환값은 다음과 같은 방식으로 나타낼 수 있습니다:
> 
> 1. 결과 세트 반환: 프로시저가 실행될 때 생성된 결과 세트를 반환할 수 있습니다. 결과 세트는 일련의 행과 열로 구성되며, SELECT 문을 실행하여 얻은 데이터로 채워집니다. 호출자는 결과 세트를 받아와 필요한 데이터를 처리할 수 있습니다.
> 2. 출력 매개변수: 프로시저 정의에서 **`OUT`** 또는 **`INOUT`**으로 선언된 매개변수를 사용하여 결과 값을 반환할 수 있습니다. 호출자는 이러한 출력 매개변수를 사용하여 프로시저 실행 후에 생성된 결과 값을 확인하고 활용할 수 있습니다.
> 
> 프로시저의 반환값은 프로시저의 목적과 개발 환경에 따라 다를 수 있습니다. 일반적으로 프로시저는 데이터 조회, 처리 결과, 성공/실패 여부 등의 정보를 반환하기 위해 사용됩니다. 반환값을 사용하여 호출자가 프로시저의 실행 결과를 알 수 있고, 이를 기반으로 추가적인 로직을 처리할 수 있습니다.
>
