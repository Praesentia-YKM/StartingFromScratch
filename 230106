#<FrontController 패턴 특징>
  프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받음
  프론트 컨트롤러가 요청에 맞는 컨트롤러를 찾아서 호출
  입구를 하나로!
  공통 처리 가능
  프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 됨
  스프링 웹 MVC와 프론트 컨트롤러
  스프링 웹 MVC의 핵심도 바로 FrontController
  스프링 웹 MVC의 DispatcherServlet이 FrontController 패턴으로 구현되어 있음

#서블릿과 비슷한 모양의 컨트롤러 인터페이스를 도입한다. 각 컨트롤러들은 이 인터페이스를 구현하면 된다. 
 프론트 컨트롤러는 이 인터페이스를 호출해서 구현과 관계없이 로직의 일관성을 가져갈 수 있다.
 이제 이 인터페이스를 구현한 컨트롤러를 만들어보자. 지금 단계에서는 기존 로직을 최대한 유지하는게 핵심이다.
 
#Front Controller
http요청의 url매핑정보를 가지고 컨트롤러에 매핑정보를 담아둔다.
ex) /a가 오면 컨트롤러 a가 호출이 되야한다.
해당 컨트롤러를 호출하고 로직을 수행하고 jsp의 forward로직으로 mvc가 되어 응답이 나가는 구조.
 
#서블릿과 비슷한 모양의 컨트롤러 인터페이스를 도입한다. 각 컨트롤러들은 이 인터페이스를 구현하면
된다. 프론트 컨트롤러는 이 인터페이스를 호출해서 구현과 관계없이 로직의 일관성을 가져갈 수 있다.
이제 이 인터페이스를 구현한 컨트롤러를 만들어보자. 지금 단계에서는 기존 로직을 최대한 유지하는게 핵심이다.

#같은 레벨의 큰 구조끼리 개선하고 배포하고 커밋하고 끝내고 다시 더 세밀하게 들어가는 작업이 좋다
