<아는 것도 다시보자!>
접근 제한자🖐
접근 제한자(Access Modifier)는 말 그대로 접근을 제한하기 위해 사용됩니다. 여기서 접근이란 클래스 및 인터페이스 그리고 이들이 가지고 있는 멤버의 접근을 말합니다. 
어떤 경우에는 클래스와 인터페이스를 다른 패키지에서 사용하지 못하도록 막을 필요가 있습니다. 그리고 객체 생성을 막기 위해 생성자를 호출하지 못하게 하거나 필드나 메소드를 사용하지 못하도록 막아야 되는 경우도 있습니다. 
이때 접근 제한자를 사용할 수 있습니다. 
접근 제한자는 public, protected, private와 같이 세 가지 종류가 있습니다.

public 접근 제한자: 단어 뜻 그대로 외부 클래스가 자유롭게 사용할 수 있도록 합니다.
protected 접근 제한자: 같은 패키지 또는 자식 클래스에서 사용할 수 있도록 합니다.
private 접근 제한자: 단어 뜻 그대로 개인적인 것이라 외부에서 사용될 수 없도록 합니다.

위 세 가지 접근 제한자가 적용되지 않으면 default 접근 제한을 가집니다.
default 접근 제한: 같은 패키지에 소속된 클래스에서만 사용할 수 있도록 합니다


<MVC viewResolver>

뷰 리졸버
MyView view = viewResolver(viewName)
컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다. 그리고 실제 물리 경로가 있는 MyView
객체를 반환한다.
논리 뷰 이름: members
물리 뷰 경로: /WEB-INF/views/members.jsp
view.render(mv.getModel(), request, response)
뷰 객체를 통해서 HTML 화면을 렌더링 한다.
뷰 객체의 render() 는 모델 정보도 함께 받는다.
JSP는 request.getAttribute() 로 데이터를 조회하기 때문에, 모델의 데이터를 꺼내서
request.setAttribute() 로 담아둔다.
JSP로 포워드 해서 JSP를 렌더링 한다.

< HeidiSQL > 
HeidiSQL을 사용하는 이유
HeidiSQL을 통해 세션을 만들고 로컬이나 원격 서버에 접속하고, 접속된 데이터 서버 내의 데이터베이스를 관리할 수 있습니다. 
GUI 환경을 제공하기 때문에 테이블을 시각화해서 보기 편하고, 툴 안에서 SQL문을 사용하지 않더라도 마우스를 통해 많은 작업을 수행할 수 있습니다.
HeidiSQL 하나만 있어도 MariaDB, MySQL, Microsoft SQL, PostgreSQL, SQLite 등의 데이터베이스 시스템을 실행하는 컴퓨터에 접속해서 데이터 구조를 보고 편집할 수 있습니다. 
물론 각 DBMS에서도 GUI 환경을 제공하는 도구를 사용할 수 있습니다. 다만 HeidiSQL은 하나의 툴로도 위에서 언급한 RDBMS를 모두 관리할 수 있습니다. 
하나의 창에서 여러 서버에 연결도 가능합니다.
오픈 소스로 제공되기 때문에 무료로 사용할 수 있는 장점이 있습니다. 전 세계적으로 가장 널리 사용되는 데이터베이스 관리 도구입니다.


SQL이란?

---

<aside>
🤔 Structured Query Language
# 현업에서 쓰이는 관계형 DBMS의 표준언어
# 종합적인 database언어 → DDL + DML + VDL 
# RDBMS의 표준언어지만 실제 구현에 강제가 없기 떄문에 RDBMS마다 제공하는 SQL의 스펙이 조금씩 다르다(mysql , oracle , …sql을 사용하지만 다 문법이 조금씩 다름)

</aside>

SQL 주요 용어

---

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/50563b76-b918-4b09-9d81-c6e27ba90dec/Untitled.png)

SQL에서 relation이란?

---

⇒ multiset of tuple 즉, 중복된 tuple을 허용한다.

- MariaDB SQL문법 사용
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c80da170-4ec0-429b-9813-2b29ea38525d/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/db9e1c9b-d794-4478-907d-bd40c998f3a7/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cc8586d8-c4e1-4a02-bc6b-517826b04501/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/38aa1583-5691-48b7-be13-6dcd3646519c/Untitled.png)
    
    <aside>
    🤔 MySQL에서는 데이터베이스와 스키마가 같은 뜻을 의미.
     CREATE DATABASE DB명 = CREATE SCHEMA DB명 
    같은 의미의 명령어를 지닌다.
    
    * MYSQL이 아닌 다른 RDBMS에는 의미가 다를 수 있다.
    
    </aside>
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5c747f75-f343-44aa-b5f9-30ee88b104de/Untitled.png)
    
    ## Attribute data type : 숫자
    
    ---
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d7ce4b8a-e040-4e74-909b-12c748a59389/Untitled.png)
    
    ## Attribute data type : 문자열
    
    ---
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/30fec0ac-f323-422c-839b-db890af45f96/Untitled.png)
    
    ## Attribute data type : 날짜와 시간
    
    ---
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/869de52c-0fed-4821-b6ca-4375b7f7ad1a/Untitled.png)
    
    UTC : 표준 시간대
    
    ## Attribute data type : 그 외
    
    ---
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d9934373-fe24-40e1-8c33-3feb4ab3ddd4/Untitled.png)
    
    ## Key constraints
    
    ---
    
    - PRIMARY KEY
        - TABLE의 튜플을 식별하기 위해 사용, 하나 이상의 애트리뷰트로 구성
        - 중복된 값을 가질 수 없다. NULL값도 가질 수 없다.
        
        - [ ]  선언방법
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/77945432-359f-43e3-a23e-b00e68fa6b6d/Untitled.png)
            
    - UNIQUE KEY
        - UNIQUE로 지정된 애트리뷰트는 중복된 값을 가질 수 없다.
        - 단, NULL은 중복을 허용할 수도 있다(RDBMS마다 다름)
        
        - [ ]  선언방법
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/885f8c5f-afc0-40d5-9c92-6a608ae41294/Untitled.png)
            
        
    - NOT NULL
        - 애트리뷰트가 NOT NULL로 지정되면 해당 애트리뷰트는 NULL을 값으로 가질 수 없다.
        
        - [ ]  선언방법
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d7ef3e46-4819-450b-97b8-7c1c14a41359/Untitled.png)
            
    - FOREIGN KEY
        - 애트리뷰트가 다른 TABLE의 PRIMARY KEY나 UNIQUE KEY를 참조할 때 사용(반드시 존재하는 값이여야 함)
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b17d3e3-edf4-4438-8392-f96d7f640a06/Untitled.png)
            
        
        - [ ]  선언방법
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6078782c-b07d-4604-9d24-373532f77d02/Untitled.png)
            
            참조하는 값이 삭제/변경 될때의 옵션을 지정해줘야 함
            
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f2bfd84-4f3b-48ee-ab01-0c9904063383/Untitled.png)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9257bbe7-d89e-447b-9204-bd3bcbbb3243/Untitled.png)
    
    ## DEFAULT constraints
    
    ---
    
     : 새로운 튜플을 저장할 때 해당 애트리뷰트에 대한 값이 없다면 DEFAULT로 저장
    
    ## CHECK constraints
    
    ---
    
    : 애트리뷰트의 값을 제한하고 싶을 때 사용( ex. 최소연봉 5천이상)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3169050c-93cb-4ca3-9cce-a98561b4ba9c/Untitled.png)
    
    - [ ]  선언방법
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9a95dc7f-f0e7-4780-870c-0c5c3fd932ed/Untitled.png)

## SELECT

---

Q: project 2002를 리딩(leading)하고 있는 임직원의 ID와 이름과 직군을 알고싶다

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e42cd589-8b67-4457-8c98-f0c37d5b7b05/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bed517fe-8f83-44f5-81cb-38bedfd27864/Untitled.png)

⇒ 둘중 어떤 id를 말하는지 모르는 경우 테이블명.id로 구분하기

## AS

---

⇒ 또는 AS를 써서 별칭을 지정해서 쓰기

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fa959673-d508-438d-8fe8-719d0bc12cca/Untitled.png)

⇒ 테이블이나 애트리뷰트에 as를 통해 별칭부여 가능!

## DISTINCT

---

- [ ]  SELECT결과에서 중복되는 튜플을 제외하고 싶을때 사용

Q: 디자이너들이 참여하고 있는 프로젝트의 ID와 이름을 알고싶다.(join을 써도 되지만 reference만 활용해서 작성)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/65ff4816-7e6d-43e7-bd36-40592bce89ca/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61b711a4-2f51-4920-afc9-eae5f89bb0b1/Untitled.png)

⇒ 어? 2003 중복된 튜플이 있네?

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4d1bfc0e-2e24-4c95-a0b1-b9138abbcc50/Untitled.png)

## LIKE

---

- [ ]  문자열 pattern matching에 사용

Q: 이름이 N으로 시작하거나 N으로 끝나는 임직원들의 이름을 알고싶다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/54ed6f3c-542b-42c4-9ae5-ea7be32384fc/Untitled.png)

Q: 이름이 J로 시작하는, 총 네글자의 이름을 가지는 임직원들의 이름을 알고싶다

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7c754326-6d6d-4047-80e6-802cf589fa84/Untitled.png)

Q: %로 시작하거나 _ 로 끝나는 프로젝트 이름을 찾고 싶다면?

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1f2b636b-becd-4db6-9436-4a1af5ec6b15/Untitled.png)

⇒ 백슬래쉬다음 %나 _ 는 특별한 의미가 아닌 본연 글자 그대로의 의미로 사용할 수 있게 해준다!

- [ ]  SELECT, INSERT, UPDATE, DELETE에 포함된 query
- [ ]  반드시 ()안에 기술된다.

Q: ID가 14인 임직원보다 생일이 빠른 임직원의 ID, 이름, 생일을 알고싶다.

1. ID가 14인 임직원 찾기
2. 그 직원의 생일보다 생일이 빠른 사람의 정보를 알아내야함

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/718db596-604c-4051-ac87-cc46b808a4a7/Untitled.png)

Q: ID가 1인 임직원과 같은 부서, 같은 성별인 임직원들의 ID와 이름과 직운을 알고싶다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fe2783e1-cac5-4c91-a677-cad485150157/Untitled.png)

Q: ID가 5인 임직원과 같은 프로젝트에 참여한 임직원들의 ID를 알고싶다.

1. ID가 5인 임직원이 참여한 프로젝트가 무엇인지
2. 그 프로젝트에 참여한 임직원들의 ID를 알아내야함

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f2150653-8c82-484e-b52e-0d3193d94941/Untitled.png)

⇒ IN을 사용해서 줄여보기(OR로 섞인건 묶을 수 있음)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1465f405-20ca-4adb-93f6-67aa95288b0d/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b0b033d2-9f7e-49b4-b193-d2caa36c4a0e/Untitled.png)

⇒ 최종!

### ?????? 근데????여기서 ID가 5인 임직원과 같은 프로젝트에 참여한 임직원들의 ID와 이름을 알고싶다면??

> 우리는 임직원들의 ID까지는 구했다 이제 이 결과를 다시 employee테이블과 연결시켜주면 된다!
> 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/29d34e87-e437-4be4-b075-5befa4485d2d/Untitled.png)

서브쿼리를 통해 구한 결과를 바탕으로 employee테이블을 조회해서 id가 1~ 14에 해당되면 id와 name조회

다른형태로는

(where위치에 있던 서브쿼리가 from위치에 서브쿼리가 들어갈 수도 있다)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2047463e-a0aa-412f-a1aa-1fbdd8dcac3a/Untitled.png)

Q: ID가 7 혹은 12인 임직원이 참여한 프로젝트의 ID과 이름을 알고싶다.( IN이 아닌 EXISTS사용해보기)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3fb1a534-7779-4320-9cad-bf40c6730109/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e7a6ffbf-7f9c-424e-b1e3-7ff4fbfa9af5/Untitled.png)

같은 문제 IN으로도 바꾸기 가능

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fc4ec076-c928-4a0e-87b3-89481b7d6356/Untitled.png)

Q: 2000년대생이 없는 부서의 ID와 이름을 알고싶다

(NOT EXISTS)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1e1da55c-da4b-41e6-802b-e4ca6583f2d7/Untitled.png)

서브쿼리를 실행할때 아무것도 가져오는게 없으면 그 부서에는 2000년대생이 없는거니까 NOT EXISTS가 TRUE가 되므로 외부 SELECT실행!!

마찬가지로 같은 문제를 NOT IN으로 바꿀 수 있따!!

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b8e0cfee-b931-4624-a3b9-1548361e3531/Untitled.png)

Q: 리더보다 높은 연봉을 받는 부서원을 가진 리더의 ID와 이름과 연봉을 알고싶다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fc8367f1-0b33-48d4-8afb-da2be11849e8/Untitled.png)

리더인지 아닌지의 여부를 알기위해 department테이블도 조회

리더와 같은 부서인지 우선 서브쿼리를 통해 조회하고, ANY를 통해 서브쿼리가 반환한 결과들 중에 단 하나라도 salary보다 크면 t그 사람의 id와 이름과 연봉을 반환!

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3dcdbba5-9a17-4211-94b5-cf1a70e9ea8a/Untitled.png)

????그리고 위 문제의 반환값에 대해 그럼 그 사람이 속한 부서의 최고 연봉은 얼마야?

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e0905d18-0c93-4bdb-bd12-49f23e4d21cb/Untitled.png)

⇒ 여기에 서브쿼리를 하나 더 둔다

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/750c509e-4bc4-4390-bbed-e18df40ae53d/Untitled.png)

select절과 from절에 각각 서브쿼리가 추가될 수 있따.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/416a6ba3-2839-47a7-b1c1-741f1fc099ca/Untitled.png)

Q: ID가 13인 임직원과 한번도 같은 프로젝트에 참여하지 못한 임직원들의 ID, 이름, 직군을 알고싶다.

---

1. ID가 13인 임직원이 참여한 프로젝트를 구한다.
2. 그 프로젝트 정보를 가지고 한번도 참여하지 못한 임직원들 정보를 구한다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/96095952-06f5-4488-abcd-36e212e3fff3/Untitled.png)

한번도 참여하지 못한 임직원 정보를 알기위해 조회된 프로젝트ID서브쿼리에 단 하나라도 같은게 없어야 해서 <> ALL을 사용

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0fdc1f19-7cbb-4ae1-9d81-b100034ba7ff/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/79eb87aa-01b4-40cc-a66a-6cacbe92bd47/Untitled.png)
