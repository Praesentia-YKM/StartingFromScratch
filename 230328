- lombok은 내가 직접 짤 소스코드를 대신 해주는 친구
    - 내가 직접 짜지 않고 코딩 되어있는걸 가져다 쓰는 것
- ContextConfiguration 이 부분이 아주 중요하다 이마리야
- Spring은 크게 3가지 !!!
- Web : MVC : Presentation
- Business : Spring framework
- Persistence : DB : Mybatis
- Spring은 2teer로 로딩 (2단계)
    - Web 단 1단계 - (servlet-context.xml) - servlet-container
    - Business, Persistence 단 1단계 - (root-context.xml) - root-container
    - 총 2단계
    - root-context.xml : Spring, DB(Business, Persistence) 관련 애들 로딩
    - servlet-context.xml : MVC(Web) 관련 애들 로딩
- component-scan
    - 아래 어노테이션이 붙은 애들을 찾아서 Spring이 관리할 수 있도록 지정 → Spring Container에 적재한다.
    - @Component, @Controller, @Service, @Repository, @Mapper
    - root-Container : Spring, DB(Business, Persistence) 영역
        - @Service, @Repository, @Mapper
    - servlet-Container :  MVC(Web) 영역
        - @Controller
    - 모든 영역
        - @Component - 위 네가지 애들은 모두 @Component를 상속 받음.

- log level (순위)
    1. fatal
    2. error
    3. warn
    4. info
    5. debug
- <!— Root Logger —>
    - 이 위에 설정된 경로 외에 것에서 에러 발생했을 경우 에러 단계를 설정하는 부분
    - 에러 단계를 확인이 필요한 순간 : 트러블 슈팅
    - 이럴 때 warn 단계로 올려 info, debug 메세지는 안보는 경우도 있음
        - 왜 ?  : 무조건 고칠 필요까진 없어서.
- 여기까지 지난 시간 리뷰 !!
- 63페이지 실행된 다음 주목해야할 부분 3가지 !!
    1. 객체를 선언만 하고 객체화 (new) 하진 않음 !!
        1. Spring이 로딩될 때  new하여 객체화(component-scan)하고 @AutoWired로 의존주입(생성자 주입, Setter주입)까지 대신 수행해줌 !!
        2. 객체를 객체화(new)해서 의존 클래스에 주입을 시켜서 해당 객체를 사용해야 하는데 new 단계를 생략함으로써 소스를 줄이고 Spring Container에 각 객체 별 한 가지 객체만을 생성하여 재사용하기 때문에 Single-ton을 따라감.
        3. 이것으로 우리가 얻을 수 있는 것 
            1. 소스 단축 → 시간 단축 : 의존성 자동 주입 → 생성자 주입, Setter 주입
            2. 객체 단축 → 메모리 단축 : component-scan으로 어노테이션 붙은 애들 Spring Container에 객체화 하여 적재 → Single-ton
- @RunWith + @Test 하면 테스트 유닛이 생성되고 Run as 를 통해 해당 함수를 테스트 실행시킬 수 있음
- ContextConfiguration(”url”)
    - 이건 뭘까용~?
    - **찾아보기.**
- 64페이지 자바로 설정하는 부분은 시험에서 제외..
- 65페이지 onMethod
    - to jdk 7, from jdk 8 이렇게 두개 나와있는데 jdk 8 로 보면 됨.
- @Data 많이 사용되는 애
    - 많이 사용하는 method들이 자동 생성 : toString(), 뭐 등등
- protected 접근제어자 : 상속받는 애들이 사용할 수 있음.
- 최석원 교수님이 중요하게 생각하시는 부분
    - 식별하기가 매우 좋아짐.
    1. Indentation
    2. naming Rule
        1. Camel case : 대소문자 구분하기 때문 : Java 에서 사용
            - 클래스명 : Chef, Restaurant, SampleHotel
            - 메소드명 : getChef(), getRestaurant()
            - 객체&변수명 : chef, restaurant, sampleHotel
        2. Underbar case : 대소문자 구분하지 않기 때문 : DB 에서 사용
- **생성자 의존 주입**
    - SampleHotel class 생성
    - 생성자 의존 주입 방식은 멤버변수에 @AutoWired만 적어주면 끗-
    - HotelTests Test class 생성
    - alt+shift+s+r : getter / setter 단축키
    - alt+shift+s꾹 : toString() 단축키
        - @ToString() / toString() :
        - 기본 toString()은 객체의 주소값(ab@sg13sf)이 나옴 근데 우리는 객체 값을 알고 싶으니 Override 하는 것.
        
        ```java
        @Override
        	public String toString() {
        		return "SampleHotel [chef=" + chef + "]";
        	}
        ```
        
- 1개의 객체가 하나의 의존 주입만 할 수 있지 않고 여러 객체를 의존 주입 받을 수 있다.
    - EX) Car class가 있으면 바퀴 객체, 문 객체, 핸들 객체를 사용해야 하기 때문에 의존 주입 받아야한다.
- Setter 주입 해야하는 경우
    
    ```java
    	private Restaurant restaurant;
    	private Chef chef;
    	@Autowired
    	public void setRestaurant(Restaurant restaurant) {
    		this.restaurant = restaurant;
    	}
    	@Autowired
    	public void setChef(Chef chef) {
    		this.chef = chef;
    	}
    ```
    
- 생성자 주입 해야하는 경우
    
    ```java
    	// 교수님 선호 방식
    	@Autowired
    	private Chef chef;
    	@Autowired
    	private Restaurant restaurant;
    ```
    
    ```java
    	// 변수에 @AutoWired 안쓰는 방법
    	@AllArgsConstructor
    	public class SampleHotel {
    		private Chef chef;
    		private Restaurant restaurant;
    	}
    ```
    
    ```java
    	private Restaurant restaurant;
    	private Chef chef;
    
    	public SampleHotel(Restaurant restaurant, Chef chef) {
    		this.restaurant = restaurant;
    		this.chef = chef;
    	}
    ```
    
- 본인이 편한대로 하는 것이 맞지만, 한 가지 방법을 골랐으면 전부 그 방식으로 통일해줘야 함.
- 다음 시간 Spring + Oracle 연동

- 시험 2번 다 프로그램 제출
- 중간고사 변별력 X
    - 이유는 중간고사 지나고 포기할 까봐
- 기말고사는 어려울 수 있음.
- 웹 심화 Spring : 1년과정
- A : 30%
- A ~ B : 100% 까지 가능 !!! ㅋㅋㅋ
- 시험 때 다 틀려도 Indentation, naming rule 만 지키면 점수 나올 것 !!!
- Open book, Open Internet




> ##  **맵 사용법 ##**
> 
> 
> map선언시
> 
> **Map<String, String> map= new HashMap<>();**
> 
> 이렇게 하는데 앞의 Map과 뒤의 HashMap의 글자가 다른 이유는 Map이 인터 페이스이기 때문이다.
> 
> 인터페이스는 선언만 가능하다. 객체 생성이 불가능한 것들이다.
> 
> 때문에 자식인 HashMap으로 객체를 생성한다.
> 
> HashMap은 본인의 메소드 외에 부모인Map의 메소드들을 강제 상속받는다.
> 
> **HashMap<String, Object> map2= new HashMap<>();**
> 
> 이렇게 선언도 가능하다.
> 
> List도 같은 맥락
> 
> List를 왜 ArrayList로 객체 생성하는지 몰랐는데 Map과 같은 이유였다.
> 
> List는 인터페이스 부모니까, 바디 생성이 불가능하다.
> 
> 때문에 자식인 ArrayList, vector등으로 객체를 생성한다.
>


- 브라우저 캐시관리(script파일 관련)
    
    > 서버재시작, 인텔리제이 source update이런건 클래스파일과 관련있는거지, sript나 jsp파일이랑은 관련이 없다. 순전히 앞딴 문제는 브라우저가 관리하는데 브라우저의 캐시를 날려보고 다시 한다던가 하면 된다.
    > 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b3bda504-cd50-4402-9e9c-47da7bc82428/Untitled.png)
    
    ⇒ 해당 경로의 파일 
    
- GROUP BY
    
    <aside>
    💡 SELECT 한 컬럼과 GROUP BY한 컬럼을 맞춰줘야한다. ( NULL값 제외)
    
    </aside>
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9fc0e085-ad98-4bfa-9c91-052df1d88a33/Untitled.png)
    
- UNION 주의사항
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ab1f830b-cb2d-4997-9954-6d5b169d6078/Untitled.png)
    
    - 웹서버와 was구동순서
    
    . 보통 아파치(웹서버)와 톰캣을 예로들어 **웹서버와 WAS 연동 시 동작되는 방식**은 다음과 같다.
    
    1. 서비스를 사용하는 유저가 브라우저를 통해 아파치 웹서버에 요청
    
    2. 아파치 웹서버는 이 요청이 톰캣에서 처리해야하는 요청인지 확인
    
    3. 톰캣에서 처리해야하는 경우 톰캣의 AJP포트에 접속하여 요청건 전달
    
    4. 톰캣은 웹서버로부터 요청을 전달받아 처리 후 다시 웹서버에 전달
    
    5. 아파치 웹서버는 결과값을 사용자에게 전달
    
- 컴파일시 변화 , xml 수정시 서버 재기동 필요없게하기
    
    > java파일은 complie을 통해 class파일이 만들어지고 이를 jvm이 해석하여 어플리케이션이 실행된다.
    > 
    
    > mybatis 환경 설정을 통해 xml 파일들을 parsing하여 이 정보를 가지고 있는 bean을 통해서 해당 쿼리가 실행된다. **이 bean은 어플리케이션 실행시에 bean이 생성되며 Sql 쿼리 문을 저장**해 놓는다.(여기서 말하는 bean은 SqlSessionFactory이다. DB Connection, Transaction, Sql 정보등을 가지고 있다.)
    > 
    > 
    > 따라서 이 bean의 Sql 정보를 변경해주지 않는 이상, xml 파일을 변경하더라도 반영되지 않는 것이다.
    > 
    > 그렇다면 어떻게 변경되는지 알아보기 위해서, 먼저 어떻게 초기화 되는지를 알아야한다.
    > 
    > SqlSessionFactory가 bean으로 등록되는 과정중에 afterPropertiesSet메서드가 호출되면서 buildSqlSessionFactory(); 메서드가 호출된다. 이 과정에서 Sql 관련, Connection 관련 정보들이 세팅된다.
    > 
    > ⇒ 이렇게 구동이 되는게 기본인데 이걸 이제 동적으로 되게 하면 된다.
    > 
    > .xml 변경 이후에 afterPropertiesSet 메서드를 호출하여 xml을 다시 읽고 sqlSessionFactocy에 할당을 해주면서 동적으로 xml을 반영하도록한다. 즉, 
    > mybatis가 사용하는 sqlSessionFactoryBean이 가지고있는 sqlSource를 변경해준다
    > 
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9968eb9b-c63b-42b1-b530-291ccf8dd1c3/Untitled.png)
    
    ## **❗️객체를 위한 for문 사용법**

**배열과 객체, 반복문을 응용하여 대량의 정보를 다룰 수 있다.객체에서 사용하는 반복문은 for in
    ◦ `for( let key in obj )`
    ◦ `for in`문은 객체안에 모든 키를 찾아 ‘key’라는 변수에 할당한다.배열에서 사용하는 반복문은 for of
    ◦ `for( let el of arr )`
    ◦ `for of` 문은 배열의 ‘index’ 만큼 반복하여 엘리먼트를 ‘el’라는 변수에 할당한다.**

---

## **⚡️ 객체(Object)의 메소드(Method)**

### **❗️Object.keys(obj)**

**객체(object)의 속성(property)의 이름(key)을 배열(array)로 반환(return)한다.**

[Object.keys() - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)

### **❗️Object.values(obj)**

**객체(object)의 속성(property)의 값(values)을 배열(array)로 반환(return)한다.**


마이바티스에서 제공하는 **SqlSession 클래스에서는 CRUD를 위한 다양한 메서드를 제공합니다.**

대표적인 select 관련 메서드는 아래 테이블과 같습니다.

| 메서드 | 기능 |
| --- | --- |
| List selectList(query_id) | id에 대한 select문을 실행한 후 레코드를 List로 반환합니다. |
| List selectList(query_id, '조건') | id에 대한 select문을 실행하면서 조건(쿼리문에서 사용할 인자)를 전달합니다. |
| T selectOne(query_id) | id에 대한 select문을 실행한 후 한개의 레코드를 지정한 타입으로 반환합니다. |
| T selectOne(query_id, '조건') | id에 대한 select문을 실행하면서 조건(쿼리문에서 사용할 인자)를 전달합니다. |

⇒ 하나의 레코드 반환 : selectone

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7f77ca3e-43bd-46b7-abd4-0d6a60f24bde/Untitled.png)

레코드(record)는 SQL에서 행(row) 또는 튜플(tuple)이라고 불린다.

- 레코드 삽입 - INSERT

```
> INSERT INTO [테이블명] (컬럼명1, 컬럼명2 ...)
              VALUES (삽입할 데이터값1, 삽입할 데이터값2...);

```

레코드를 삽입하는 INSERT문에서 중요한 부분은 컬럼명의 개수와 데이터값의 개수가 일치해한다. 또한 각 컬럼에 지정된 데이터 타입과 데이터값의 타입이 일치해야하며, 컬럼의 순서와 삽입할 데이터값의 순서도 일치해야한다. 만약 특정 컬럼의 데이터값을 NULL 혹은 비워두고싶다면, 데이터값을 NULL로 지정해주거나 INSERT문에서 특정컬럼명을 제외하고 작성해주면 된다. [[1]](http://wiki.hash.kr/index.php/%EB%A0%88%EC%BD%94%EB%93%9C#cite_note-.E7.84.A1.E6.89.80.E6.9C.89-1)

- 레코드 삭제 - DELETE

```
> DELETE FROM [테이블명] WHERE [조건];

```

레코드를 삭제하는 DELETE문에선 WHRER문을 이용하여 특정 레코드를 지정해줘야한다. 조건을 지정하지않으면 해당 테이블에 있는 모든 레코드가 삭제되기 때문에 주의해서 사용해야한다. 또한 삭제 기능은 데이터베이스를 따로 백업해두지않은 이상 복원할 수 없기 때문에 사용시 신중해야한다. [[1]](http://wiki.hash.kr/index.php/%EB%A0%88%EC%BD%94%EB%93%9C#cite_note-.E7.84.A1.E6.89.80.E6.9C.89-1) [[2]](http://wiki.hash.kr/index.php/%EB%A0%88%EC%BD%94%EB%93%9C#cite_note-everdevel-2)

- 레코드 수정 - UPDATE

```
> UPDATE [테이블명] SET [컬럼명] = [변경할 데이터값1], ... WHERE [조건];
```
