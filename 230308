자바스크립트 익명 함수는 함수명 대신 변수명에 함수 코드를 저장하는 구현 방식이다. 익명 함수의 소스 코드는 변수값이므로 끝에 세미콜론 ; 을 대입한다. 익명 함수는 호출 시 변수명을 함수명처럼 사용하면 된다.

## 구조

```
  var 변수명 = function( 매개변수 )
  {
    실행문;
  };
```

이 경우 변수값을 변수에 넣은 형태이므로 함수 코드 끝에 세미콜론을 붙여준다.

hello라는 변수명에 "Hello World!"라는 문자가 출력되는 함수 코드를 저장했다.hello()로 익명 함수를 호출하면, 소스코드가 실행된다.

```
<script>
  // 익명 함수 선언 및 변수에 대입
  var hello = function( ) {
    document.write("Hello World!");
  };

//익명 함수 변수명으로 호출
hello();
// result : Hello World!
</script>
```

## 익명함수 + 반환문

return 제어문으로 반환이 되는 경우는 익명 함수를 다른 명령어에 대입시키면 된다.함수를 괄호와 함께 변수처럼 원하는 곳에 기입하면 된다.

```
// 익명 함수 선언 및 변수에 대입
var hi = function( ) {
  var string = "Hello World!";
  return string;
};

//익명 함수의 변수를 출력
document.write( hi( ) );
// result : Hello World!
```

익명 함수의 매개 변수와 반환문이 모두 있는 경우에도 정상 함수와 똑같이 작동한다.

```
//익명 함수 선언 및 매개변수 사용
var fusion = function( a, b ) {
  var z = a + b;
  return z;
};

//익명 함수의 변수를 출력 및 인수 입력
document.write( fusion( "Hello", "World!" ) );
// result : HelloWorld!
```

- 자바스크립트에서 [] 는 배열이긴한데 list개념에 더 가깝다. → 데이터 추가시 datalist.push()를 함
    
    > 자바스크립트에서 객체 {} 를 선언한 후 객체이름만 쓰면 그 객체의 value값이 담김
    > 
    
    ex) var reqData = {} ; 해놓고 아래에 sendData.A= reqData ; 라고하면 reqData의 value값이 sendData에 담긴다
    
    ```sql
    View에서 key, value를 가진 json 배열 형식으로 만들어 보내고 싶은데 
    
    단건이 아닌 다건의 여러개 데이터를  보낼때 중괄호와 대괄호에 개념을 정리하게 되었다.
    
    var dataList = [];
     
    for (var i = 1, j= 100; i <= 3; i++,j+= 100) {
        var data = {};
        data.number = i;
        data.priorSeq = j;
        dataList.push(data); // 데이터 푸시
    }
     
    var reqData = {};
    reqData.dataList = dataList;
     
    var sendData = {};
    sendData.reqData = reqData;
     
    console.log(sendData);
    debugger;
    ```
    
    --> 개발자도구를 통해 debugger 전 결과를 확인해보면
    
     reqData : {dataList: Array(3)}
    
     dataList : (3) [{…}, {…}, {…}]
    
     0 : {number: "1", priorSeq: "100"}
    
     1 : {number: "2", priorSeq: "200"}
    
     2 : {number: "3", priorSeq: "300"}
    
    다음과 같이 나오게 되고
    reqData 는 { [ { }, { }, { } ] } 이런 구조가 된다.
    
    ## JQuery each문
    
    ---
    
    $.each() 메서드는 object 와 배열 모두에서 사용할 수 있는 일반적인 반복 함수입니다.
    
    다시 말해, 배열과 length 속성을 갖는 배열과 유사 배열 객체들을 index를 기준으로 반복할 수 있습니다.
    
    첫 번째 매개변수로 배열이나 객체를 받습니다.
    
    그리고 두번째 매개변수로 콜백함수를 받으며 콜백함수의 인자로는 인덱스와 값을 인자로 갖습니다.
    
    **JAVASCRIPT**
    
    ```
    // 객체을 선언
    var arr= [
        {title : '다음', url : 'http://daum.net'},
        {title : '네이버', url : 'http://naver.com'}
    ];
    
    // $.each() 메서드의 첫번째 매겨변수로 위에서 선언한 배열은 전달
    $.each(arr, function (index, item) {
        // 두 번째 매개변수로는 콜백함수인데 콜백함수의 매개변수 중
        // 첫 번째 index는 배열의 인덱스 또는 객체의 키를 의미하고
        // 두 번째 매개 변수 item은 해당 인덱스나 키가 가진 값을 의미합니다.
    
        var result = '';
    
        result += index +' : ' + item.title + ', ' + item.url;
    
        console.log(result);
    
        // 0 : 다음, http://daum.net
        // 1 : 네이버, http://naver.com
    
    })
    ```
    
    Copy
    
    위에서 첫 번째 매개변수에 배열을 전달했습니다. 배열을 받게 되면 콜백함수의 index, item 은 배열의 인덱스와 값을 가리키게 됩니다.
    
    다음의 예제는 배열대신 객체를 전달하는 경우입니다.
    
    **JAVASCRIPT**
    
    `// 객체를 선언
    var obj = {
        daum: 'http://daum.net',
        naver: 'http://naver.com'
    };
    
    // $.each() 메서드의 첫번째 매겨변수로 위에서 선언한 객체를 전달
    $.each(obj, function (index, item) {
    
        // 객체를 전달받으면 index는 객체의 key(property)를 가리키고
        // item은 키의 값을 가져옵니다.
    
        var result = '';
    
        result += index + ' : ' + item;
    
        console.log(result);
    
        // daum : http://daum.net
        // naver : http://naver.com`
