- Model View Controller
- 디자인패턴
- 사용자 인터페이스로부터 비지니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비지니스 로직을 서로 영향없이 쉽게 고칠 수 있는 어플리케인션을 만들 수 있다.
- Model : 어플리케이션 정보(데이터)
- View : 사용자 인터페이스 요소(체크박스. 텍스트…)
- Controller : 데이터와 비지니스 로직 사이의 상호동작

Spring Framework의 MVC에서 Model = Service, DAO, DTO(=VO)로 나눌 수 있다.
# MVC

- MVC
    - Model View Controller
    - 디자인패턴
    - 사용자 인터페이스로부터 비지니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비지니스 로직을 서로 영향없이 쉽게 고칠 수 있는 어플리케인션을 만들 수 있다.
    - Model : 어플리케이션 정보(데이터)
    - View : 사용자 인터페이스 요소(체크박스. 텍스트…)
    - Controller : 데이터와 비지니스 로직 사이의 상호동작
- MVC & Spring Framework MVC 비교
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/986b1bbd-2156-4920-bd28-95baad3f1b91/Untitled.png)
    
    - [ ]  Spring Framework의 MVC에서 Model = Service, DAO, DTO(=VO)로 나눌 수 있다.
- MVC구조
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/908fe0fd-02da-4852-ad21-5775888f70fc/Untitled.png)
    
    - Controller
        - 클라이언트에게 요청을 받고, 요청을 수행할 비지니스 로직을 제어
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a0116700-494b-4a18-aba2-15593f0cbdc5/Untitled.png)
        
    - Service
        - 비지니스 로직이 들어가는 부분
        - Controller가 Request받으면 적절한 Service에 전달하고 전달받은 Service는 비지니스 로직을 처리한다.
    - DAO
        - Data Access Object
        - DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 객체
        - DB에 접근하는 객체(트랜잭션객체)를 말한다.
        - DB를 사용해 데이터를 조회하거나 조작하는 기능을 담당하는 것들을 DAO라고 한다.
        - DAO사용이유는 효율적인 커넥션 관리와 보완성때문
        
        > Spring에서 DAO는  @Repository 어노테이션으로 정의한다. class선언시 바로 @Repository 어노테이션을 사용해도 되지만 메서드 헤더만 정의한 interface를 정의하고 이것을 구현한 클래스에 어노테이션을 붙여 사용한다. 이유는 인터페이스로 구성하면 확장성과 유연성이 높아지기 때문이다.
        > 
        
        #TestListDAOImpl.java
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/424d302e-c823-4d8a-85fe-b19389a5f7f2/Untitled.png)
        
        #TestListDAO.java
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7bb183a2-4d00-4067-85ec-70122fa68e14/Untitled.png)
        
    - DAO 작성법 3가지
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8c92e38c-1dfa-4b18-b2f6-17d6e4741b88/Untitled.png)
        
        - 기존 DAO형태로 사용하는 경우
            - @Repository 지정된 class가 EgovAbstractMapper를 extends 하여 insert, update, delete, selectByPk, list 메소드를 활용한다.
                
                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/75c5b8ff-698d-4046-9968-e4129d71b9c0/Untitled.png)
                
        - Mapper interface 사용 방식
            - Mapper 인터페이스 작성 시 다음과 같이 @Mapper annotation 사용한다. (패키지를 포함하는 클래스명 부분이 mapper xml 상의 namespace가 선택되고 인터페이스 메소드가 query id로 호출되는 방식)
                
                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b0d0a21a-d4c0-4c36-b5d9-c40eef8a2535/Untitled.png)
                
                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/83ffd9c5-c443-4d2b-9858-5f523afc79a9/Untitled.png)
                
                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2b40d81-8302-42d0-a819-83bae0d4ccbc/Untitled.png)
                
        - Annotation 사용방식
            - mapper xml 작성 없이 Mapper 인터페이스 상에 @Select, @Insert, @Update, @Delete 등의 annotation을 통해 query가 지정되어 사용된다.
                
                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ae5cbb51-156f-4aa0-926b-20d8c5f7448e/Untitled.png)
                
    - DTO , VO  ⇒jsp 자바빈즈
        
        > DTO: Data Transfer Object
        VO : Value Object
        > 
        - 각 계층간 데이터 교환을 위한 자바객체를 의미
        - 객체의 속성과 getter , setter만 가지고 있다. (로직 X)
        - 계층간 데이터 교환을 위한 자바빈즈다
        - 데이터 베이스 레코드(행)이 데이터를 매핑하기 위한 데이터 객체
        - Database에서 data를 얻어 service나 controller 등으로 보낼 때 사용하는 객체
        
        ##자바빈즈(Java Beans) - JSP 기반 웹 어플리케이션에서 정보를 표현하기 위한 객체
        
        ##Autowired와 @Resource의 차이점
						https://mangkyu.tistory.com/150

##트랜잭션
						https://mangkyu.tistory.com/154




<bean 과 의존성 주입 부분 살펴보기>
https://ch4njun.tistory.com/219









##스프링 bean이란








## 자바빈 vs 스프링빈 (아예 다름)
Java Bean은 특정 형태의 클래스를 가르키는 뜻으로 사용된다.
DTO 혹은 VO의 형태가 Java Bean이라고 생각하면 쉽다.

						https://jjingho.tistory.com/10


https://onecutwook.tistory.com/13




##커맨드객체 vo과 jsp의 name속성 ->변수명일치


##JSTL




##의존성이란 !!!! 블로그 내용 엉청 좋다
https://ecsimsw.tistory.com/entry/%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%EB%B3%80%EA%B2%BD%EC%9D%98-%EC%9C%A0%EC%97%B0%ED%95%A8

























##Json이란?
	https://velog.io/@surim014/JSON%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80
































##requestbody


@RequestBody 어노테이션과 @ResponseBody 어노테이션이 각각 HTTP요청 바디를 자바객체로 변환하고 자바객체를 다시 HTTP 응답 바디로 변환해준다. 

@RequestBody / @ResponseBody 정리. 
클라이언트에서 서버로 필요한 데이터를 요청하기 위해 JSON 데이터를 요청 본문에 담아서 서버로 보내면, 서버에서는 @RequestBody 어노테이션을 사용하여 HTTP 요청 본문에 담긴 값들을 자바객체로 변환시켜, 객체에 저장한다.

서버에서 클라이언트로 응답 데이터를 전송하기 위해 @ResponseBody 어노테이션을 사용하여 자바 객체를 HTTP 응답 본문의 객체로 변환하여 클라이언트로 전송한다. 



## request , response , ajax

https://song8420.tistory.com/159

## 마이바티스란?
 퍼시스턴스 프레임워크의 일종이며 자바 메서드와 SQL문을 연결하는 매핑 프레임워크이다. JDBC 코드를 캡슐화하여 DB프로그래밍을 단순화 시키고 자바 소스와 SQL을 분리하여 관리한다. 

https://techhan.github.io/study/spring-07/





##sql작성시 내가 조회할 테이블을 from절에 다 포함시키는게 맞지만 from절 다음 join
을 쓰게 되면 from ( A + join (B ))이렇게해서 조인을 통해 2개의 테이블을 조회한다고 말할 수 있음 -아래예시참고




https://victorydntmd.tistory.com/149    [DAO,VO 흐름]




















##mybatis sql커넥션해주는 객체(jdbc였으면 직접구현, mybatis는 구현되어있음)
https://heewon26.tistory.com/2


https://chanhuiseok.github.io/posts/spring-3/


































##Mybatis <if>

##mybatis #{} . ${}


https://madplay.github.io/post/difference-between-dollar-sign-and-sharp-sign-in-mybatis



##where 1=1
https://hyjykelly.tistory.com/5










##람다는 익명클래스에서 유래됨 -> 익명클래스 ( 인스턴스에 클래스선언(클래스이름없이 나머지코드 그대로))
[ ( 매개변수 ) -> 실행함수 or 실행코드   ]













##DB트랜잭션
https://devuna.tistory.com/30








##mysql 트랜잭션 예제
https://audgnssweet.tistory.com/45

##mybatis 트랜잭션 적용 방법=> 회사에서는 트랜잭션을 AOP를 통해 다룸
https://codevang.tistory.com/264


https://developsd.tistory.com/129
https://yeonyeon.tistㅛory.com/223
