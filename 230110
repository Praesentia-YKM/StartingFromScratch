<프로그래머스 없는숫자구하기>
class Solution {
    public int solution(int[] numbers) {
        // 1 ~ 9 까지의 합인 45에서 numbers의 합을 빼주도록 한다.
        int answer = 45;
        
        for(int number : numbers) {
            answer -= number;
        }    
        
        return answer;
    }
}


<프로그래머스 음양더하기 자바>
signs의 해당 인덱스 값이
true 일 경우 absolutes 값이 +양수
false일 경우 absolutes 값이 -음수로
총합을 더하면 된다

예를 들어 테스트 케이스 값인 [4,7,12] [true, false, true]이라면 +4, -7, +12가 됨으로 총합은 9가 된다

class Solution {
    public int solution(int[] absolutes, boolean[] signs) {
        int answer = 0;
        
        for (int i = 0; i < signs.length; i++) {
            if (signs[i]) {
                answer += absolutes[i];
            } else {
                answer -= absolutes[i];
            }
        }
        
        return answer;
    }
}


<프로그래머스 체육복 - 그리디>
Greedy Algorithms(탐욕법, 탐욕 알고리즘) 문제
➡ 미리 정한 기준에 따라서 매번 가장 좋아보이는 답을 선택하는 알고리즘

순차적으로 배열을 비교할 수 있게 정렬한다.
여벌 체육복을 가져온 학생이 도난당한 경우, 체육복을 빌려줄 수 없기 때문에 reserve배열에서 제외시켜준다.
reserve[j]의 값을 -1로 변경
lost[i] 의 값도 -1로 변경해 도난당한 대상에서 제외시켜준다.
여벌 체육복을 가져온 학생이 자기번호의 앞,뒤 학생에게 체육복을 빌려준다.
lost[i]-1 == reserve[j] 또는 lost[i]+1 == reserve[j]
reserve[j]의 값을 -1로 변경
lost[] 와 reserve[] 배열의 요소값을 0 이 아닌 -1로 변경해주는 이유는
0으로 변경했을 경우 lost[i]+1 의 값이 1 이 되므로 if문을 타게 될 가능성이 있다.

import java.util.Arrays;
class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        int answer = n - lost.length;
        
        Arrays.sort(lost);
        Arrays.sort(reserve);
        
        // 여벌 체육복을 가져온 학생이 도난당한 경우
        for(int i=0; i<lost.length; i++){
            for(int j=0; j<reserve.length; j++){
                if(lost[i] == reserve[j]){
                    answer++;
                    lost[i] = -1;
                    reserve[j] = -1; 
                    break; 
                }
            }
        }
        // 도난당한 학생에게 체육복 빌려주는 경우
        for(int i=0; i<lost.length; i++){
            for(int j=0; j<reserve.length; j++){
                if((lost[i]-1 == reserve[j]) || (lost[i]+1 == reserve[j])){
                    answer++;
                    reserve[j] = -1; 
                    break; 
                }
            }
        }
        return answer;
    }
}
