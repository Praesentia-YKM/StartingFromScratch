1. 스프링 부트 구동 시점에 스프링 컨테이너와 서블릿 컨테이너는 각각이 필요한 기본 빈들을 생성하고, 필요한 초기화 작업과 DI 작업을 수행
2. 클라이언트로부터 URL 호출 시, 서블릿 컨테이너가 request를 파싱하고, HttpServletRequest와 Response 객체를 생성 후, 파싱된 메세지를 HttpServletRequest에 전달함. 이후, 쓰레드가 DispatcherServlet 객체의 service()를 호출(service()는 실제로 부모 클래스에서 오버라이딩 되어 있고 그 내부에서 중요한 메서드인 doDispatch()가 호출됨)
3. 이후 DispatcherServlet은 미리 초기화 해둔 handlerMappings의 handlerMapping 구현 클래스를 순서대로 하나씩 꺼내와서 검사하는데, 1순위인 RequestMappingHandlerMapping 클래스의 조회 전략은 @Controller 클래스 중, 메서드 레벨에 @RequestMapping이 붙어 있고, request의 URL 정보를 토대로 일치하는지 검사. 있다면 해당 핸들러를 반환(컨트롤러) 하지만, 없다면 서블릿 예외를 던지고 애초에 @Controller 자체가 없다면 2순위로 검사 위임하지 않음
4. 해당 핸들러를 getHandlerAdapter()를 통해서 해당 핸들러를 지원하는 어댑터가 있다면 해당 어댑터를 반환하여 HandlerAdapter ha에 할당하고, 지원하는 어댑터가 없는 경우 서블릿 예외를 던짐
5. handlerAdapter의 handler()를 수행하는데 실제 컨트롤러 메서드를 호출하기 전에, 해당 메서드가 필요로 하는 매개변수 정보를 (@RequestBody인지, HttpEntity인지) ArgumentResolver에 제공하고, 각각에 특화된 Http메세지 컨버터를 사용해서 필요한 객체를 생성
6. handlerAdapter가 컨트롤러를 호출해서 로직 수행
7. 컨트롤러가 결과값을 반환

6-1. 메서드 레벨에 @ResponseBody가 붙어있다면 RetrunValueHandler가 HttpMessengerConverter를 이용해서 반환값을 응답 메세지 바디부에 실어서 ViewResolver등을 거치지 않고 즉시 요청 송신자에 반환

6-2. 위의 경우가 아니면, ReturnValueHandler는 반환 값의 타입에 따라 적절한 HttpMessengerConverter를 통해 응답 메세지를 생성 후, ViewResolver가 동작하는데 이는 View 객체를 생성하고 DispatcherServlet가 이를 이용하여 render()하고 최종적으로 클라이언트에게 반환.
## **차이점1. 데이터 조회량 차이**

inner join과 left join의 기본적인 차이는 간단하다. 기준이 되는 from 테이블(driving table)과 조인해오는 테이블(inner table)이 있을 때, 외래키를 갖는 데이터만 불러올지, 외래키가 없더라도 모든 데이터를 driving table 기준으로 조회할지 결정하는 것이다.

orders 테이블의 member_id가 members 테이블의 id값과 외래키로 연결되어 있는 상태인데, '주인없는 주문'의 경우 member_id 값이 null이기 때문에 left join에서는 아래 그림처럼 null인 값도 포함하여 5개 행이 조회되지만, inner join으로 조회한다면 외래키가 없는 레코드(행)은 빠지게 되어 4개 행만 조회된다.

따라서 비즈니스 로직상 주인 없는 주문도 일단 다 불러와야하는 상황이라면 left join을, 연관관계가 있는 정보만 불러오고 싶다면 inner join을 해야한다. 물론, 연관관계가 없는 데이터는 들어가지 않도록 애초에 데이터베이스를 잘 설계하는 것이 중요하다.

다만 이것은 orders 테이블을 기준으로 했을 때의 경우이다. order의 행이 존재하는데 member가 지정안된 경우, 다시말해 1:N의 관계에서 N쪽 테이블을 기준으로 해야 결과의 차이가 발생한다. 숫자가 적은 members를 driving table로 지정한다면 inner join이나 left join이나 결과는 4행으로 조회되며 orders.id = 5 인 항목은 조회되지 않는다.

![https://blog.kakaocdn.net/dn/oOPqi/btrj4oBKdnc/AWk2M9hboDLEtr21k0Ckn0/img.png](https://blog.kakaocdn.net/dn/oOPqi/btrj4oBKdnc/AWk2M9hboDLEtr21k0Ckn0/img.png)

## **차이점2. 성능차이**

만약 데이터베이스를 잘 설계해서, 반드시 외래키를 갖는, 연관관계를 갖는 데이터만 존재한다고 가정해보자. 그럼 inner join이든 left join이든 위 예제의 경우 4개 행만 가져올 것이다. 그러나 그런 경우일지라도, inner join을 적용하는 것이 유리할 수 있다.

쿼리문을 실행하면 데이터베이스에서 Optimizer에 의해 최적화되어 정보를 조회하게 되는데, 복잡한 알고리즘이 필요한 경우 대체로 inner join이 성능상 유리할 수 있기 때문이다. 정확한 내용은 아니지만, 굳이 결과가 같은 상황에서 left join을 해서 리스크를 질 필요는 없다.

(얼핏 듣기로는 inner join은 driving table만 메모리에 올린 뒤 inner table은 관계로만 찾고, left join은 두 테이블을 모두 메모리에 올리는 방식으로 들음)

좀 더 자세한 이해를 위해서 최적화 알고리즘을 간단하게나마 살펴보자. 이 최적화 알고리즘은 참조1.에서 참조한 내용으로, nested loop, hash, sort merge 등의 방법을 사용한다. 그중 대표적인 nested loop의 원리를 보면, 두 테이블을 이중 포문을 돌리듯이 outer loop, inner loop로 차례대로 스캔한다고 한다.

참조1. 의 TABLE A를 하나씩 검사하면서, TABLE A의 레코드 하나당 TABLE B의 모든 레코드를 검사하는 방식이다. 그런데 TABLE B의 레코드가 N개면 N개를 모두 검사하는 것이 아니라, TABLE B에 지정된 index 값을 바탕으로 그림에서 초록색, 빨간색 원으로 표시된 2개의 레코드만 검색하면 된다. (보통 테이블을 만들 때, 데이터를 바로 찾을 수 있도록 index값을 지정해준다)

이 경우 시간복잡도는 TABLE A의 데이터 갯수(M)과 TABLE B에서의 2개의 곱으로 2M(O(n))이 되어 높은 성능을 보여준다. 이렇게 되기 위한 전제조건이, **1) driving table(기준 테이블, TABLE A)의 레코드 수가 적은 쪽이여야 하고, 2) inner table(조인 해오는 테이블, TABLE B)의 외래키에 index가 존재해야 한다는 것**이다.
