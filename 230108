<백준 알고리즘 퇴사.java>
DP를 사용해서 풀 수 있지만 N 조건이 15 이하라 사용하여 해결할 수 있다.
해당 날에 일을 할 수 있다/없다 라는 조건으로 계산한다. 최대 2^15 = 32768 이기 때문에 가능하다.
1. 정답을 찾은 경우 // 2. 불가능한 경우 // 3. 다음 경우 세 가지를 구현하여 문제를 풀 것이다.

import java.io.*;
import java.util.*;

public class Main {
	static int t[];
	static int p[];
	static int n;
	static int ans = Integer.MIN_VALUE;
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		n = Integer.parseInt(br.readLine());
		t = new int[n];
		p = new int[n];
		
		for(int i=0; i<n; i++) {
			StringTokenizer st  = new StringTokenizer(br.readLine());
			
			t[i] = Integer.parseInt(st.nextToken());
			p[i] = Integer.parseInt(st.nextToken());
		}
		go(0,0);
		
		System.out.println(ans);
		
	}

	public static void go(int index, int sum) {
		//1. 정답을 찾은 경우
		//해당 날이 퇴사하는 날 일때 최대 수익을 계산한다.
		if(index == n) {
			if(ans < sum) ans = sum;
			return;
		}
		
		//2. 불가능한 경우
		//퇴사하는 날을 넘었을 경우.
		if(index > n) return;
		
		//3. 다음 경우 
		// 일을 하게 되면 현재 일수에 걸리는 기간과 비용을 추가해 준다.
		go(index + t[index], sum+p[index]);
		
		//일을 하지 않게 되면 하루가 지나가고 비용은 그대로 이다.
		go(index+1, sum);
			
	}
}


<백준 알고리즘 스티커.java>
떼어낼 스티커를 선택하는 방법에는 두 가지가 있다.
1. 왼쪽 대각선에 위치한 스티커를 떼어냈을 경우
2. 왼쪽 왼쪽 대각선에 위치한 스티커를 떼어 냈을 경우

이 두 가지 경우 중 최대값을 선택하여 dp 배열에 저장한다.

여기서 이해가 어려웠던 것은 (1, 3)을 선택하는 경우도 존재 하지 않는가? 였다.
이에 대한 답은, (0, 4)에서 이미 이를 고려했기에 고려하지 않아도 된다.

이 두 가지 방법을 점화식을 나타내면 다음과 같다.
	dp[0][j] = Math.max(dp[1][j - 2], dp[1][j - 1]) + data[0][j];
	dp[1][j] = Math.max(dp[0][j - 2], dp[0][j - 1]) + data[1][j];
	
import java.util.Scanner;

public class Main {
    static int[][] data;
    static int[][] dp;

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            data = new int[2][n + 1];
            dp = new int[2][n + 1];

            for (int j = 0; j < 2; j++) {
                for (int k = 1; k <= n; k++) {
                    data[j][k] = sc.nextInt();
                }
            }

            dp[0][1] = data[0][1];
            dp[1][1] = data[1][1];
            for (int j = 2; j <= n; j++) {
                dp[0][j] = Math.max(dp[1][j - 2], dp[1][j - 1]) + data[0][j];
                dp[1][j] = Math.max(dp[0][j - 2], dp[0][j - 1]) + data[1][j];
            }

            System.out.println(Math.max(dp[0][n], dp[1][n]));
        }

        sc.close();
    }
}

