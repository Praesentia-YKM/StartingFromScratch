PARTITION BY 대 GROUP BY
PARTITION BY와 GROUP BY절은 복잡한 분석을 할 때 꽤나 자주 쓰게 될 SQL 문법입니다. 물론 데이터를 단순히 반환하는 것만으로도 유용할 때가 있겠지만, 우리가 마주하는 상황은 종종 더 복잡한 계산을 하는 상황이기 때문입니다. 한 단계 발전된 분석을 위해 우리는 GROUP BY와 PARTITION BY를 사용합니다. 이 둘은 데이터를 "그룹화"한다는 점에서 유사하지만, 둘 사이에는 아주 큰 차이점이 존재합니다. 그 차이점을 지금부터 살펴보도록 하겠습니다.

 

GROUP BY
GROUP BY 절은 특정 기준으로 데이터를 정의하고자 할 때 사용합니다. 보통 이런 기준은 우리가 분석을 할 때 분류 기준으로 삼는 것들입니다. 예를 들자면, 임직원의 정보를 그들의 '연봉 인상률'을 기준으로 그룹화할 수 있고, 기차 정보를 기차의 '출발역' 기준으로 그룹화할 수 있을 것이며, 매출 정보를 '연도' 및 '월별'로 그룹화하여 살펴볼 수 있습니다. 

GROUP BY 절을 사용하면 기존 행에 있던 데이터는 우리가 제공한 새로운 기준에 의해 생성된 새로운 행에 입력됩니다. 그뿐만이 아닙니다. 집계 함수를 사용하여 기존 행에 있던 값들을 계산한 후 새로운 행에 입력해 줄 수도 있습니다.  집계 함수는 데이터를 하나로 합쳐줍니다. 합치는 과정에서, 우리는 기존의 상세 데이터들을 잃게 됩니다. 집계 함수의 종류는 다양하지만, 그중 가장 많이 사용되는 함수는 COUNT, SUM, AVG, MIN, MAX 함수가 있습니다.

Oracle - 분석함수, PARTITION BY
분석함수
MAX, MIN, COUNT, LAG, LEAD, RANK, RATIO_TO_REPORT, ROW_NUMBER, SUM, AVG 등
ARGS : 0 ~ 3개 까지만 줄 수 있다.
테이블에서 몇줄에서 몇줄가지 그룹핑 해서 정렬한 다음 분석함수로 리턴할 건지를 결정하는 함수
테이블 -> 선택 행 -> 그룹핑 -> 정렬 -> 집계 리턴
[형식] 

SELECT 컬럼명, 컬럼명,,,,,
    분석함수 (ARGS[아규먼트]) OVER (
                                      [PARTITION BY] 쿼리 결과를 그룹으로 묶는다.
                                      [ORDER BY] 각 그룹의 정렬 _행의 겁색 순서_ 옵션_ ASC/DESC/NULL/FIRST/LAST
                                                 EX) DESC NULL FIRST | ASC NULL LAST
                                      [WINDOWING 절] ROWS | RANGE [BETWEEN AND]
                                  )
FROM 테이블명;

실습을 위한 EMP(사원) 테이블
EMPNO	ENAME	JOB	        MGR		HIREDATE	SAL		COMM	DEPTNO
7369	SMITH	CLERK	    7902	80/12/17	800				20
7499	ALLEN	SALESMAN	7698	81/02/20	1600	300		30
7521	WARD	SALESMAN	7698	81/02/22	1250	200		30
7566	JONES	MANAGER	    7839	81/04/02	2975	30		20
7654	MARTIN	SALESMAN	7698	81/09/28	1250	300		30
7698	BLAKE	MANAGER	    7839	81/04/01	2850			30
7782	CLARK	MANAGER	    7839	81/06/01	2450			10
7788	SCOTT	ANALYST	    7566	82/10/09	3000			20
7839	KING	PRESIDENT			81/11/17	5000	3500	10
7844	TURNER	SALESMAN	7698	81/09/08	1500	0		30
7876	ADAMS	CLERK	    7788	83/01/12	1100			20
7900	JAMES	CLERK	    7698	81/10/03	950				30
7902	FORD	ANALYST	    7566	81/10/03	3000			20
7934	MILLER	CLERK	    7782	82/01/23	1300			10

예시01 - MAX
-- 사원번호, 사원명, 직업, 봉급, 최대봉급을 조회하되,
-- 각 사원의 직업별 봉급이 어떤 카테고리에 속해 있는지 확인할 수 있도록 조회해보자.

SELECT EMPNO, ENAME, JOB, SAL,
MAX(SAL) OVER(PARTITION BY JOB)
FROM C##SCOTT.EMP
WHERE JOB IN ('MANAGER', 'SALESMAN')
ORDER BY JOB;
출력결과

     EMPNO ENAME      JOB              SAL            MAX(SAL)OVER(PARTITIONBYJOB)
---------- ---------- --------- ---------- ---------------------------------------
      7782 CLARK      MANAGER         2450                                    2975
      7698 BLAKE      MANAGER         2850                                    2975
      7566 JONES      MANAGER         2975                                    2975
      7844 TURNER     SALESMAN        1500                                    1600
      7521 WARD       SALESMAN        1250                                    1600
      7499 ALLEN      SALESMAN        1600                                    1600
      7654 MARTIN     SALESMAN        1250                                    1600
이렇게 PARTITION BY를 사용하면 직업별 봉급 최댓값을 각 직업 행에 출력해준다.

예시02 - ROW_NUMBER
-- 사원번호, 사원명, 직업, 봉급을 출력하되,
-- 직업별 봉급이 낮은 순서대로 순위를 확인할 수 있도록 조회해보자.

SELECT EMPNO, ENAME, JOB, SAL,
ROW_NUMBER() OVER(PARTITION BY JOB ORDER BY SAL) "행번호"
FROM C##SCOTT.EMP
WHERE JOB IN ('MANAGER', 'SALESMAN')
ORDER BY JOB;
출력결과

     EMPNO ENAME      JOB              SAL        행번호
---------- ---------- --------- ---------- ----------
      7782 CLARK      MANAGER         2450          1
      7698 BLAKE      MANAGER         2850          2
      7566 JONES      MANAGER         2975          3
      7521 WARD       SALESMAN        1250          1
      7654 MARTIN     SALESMAN        1250          2
      7844 TURNER     SALESMAN        1500          3
      7499 ALLEN      SALESMAN        1600          4
SQL문 두번째 줄에서, PRATITION BY JOB ORDER BY SAL 로 인해서
각 직업별 봉급이 낮은 순서대로 행번호를 붙인다.

예시03 - RANK
-- 사원번호, 사원의 이름, 부서번호, 봉급, 부서별로 급여가 많은 사원부터 순위를 출력하자.

SELECT EMPNO, ENAME, DEPTNO, SAL,
RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) "순  위"
FROM C##SCOTT.EMP;
출력결과

     EMPNO ENAME          DEPTNO        SAL       순  위
---------- ---------- ---------- ---------- ----------
      7839 KING               10       5000          1
      7782 CLARK              10       2450          2
      7934 MILLER             10       1300          3
      7788 SCOTT              20       3000          1 -- 부서번호 20 내에서 봉급이 같음
      7902 FORD               20       3000          1 -- 부서번호 20 내에서 봉급이 같음
      7566 JONES              20       2975          3 -- 다음 순위는 1등이 2명이므로, 3등으로 책정됨
      7876 ADAMS              20       1100          4
      7369 SMITH              20        800          5
      7698 BLAKE              30       2850          1
      7499 ALLEN              30       1600          2
      7844 TURNER             30       1500          3
      7654 MARTIN             30       1250          4
      7521 WARD               30       1250          4
      7900 JAMES              30        950          6
DESC 옵션을 주어, 파티션 내에서 봉급을 내림차순으로 정렬했다.
RANK의 경우 동일 봉급일 때, 같은 순위를 부여하고, 그 다음 순위는 순위 + N 의 순위가 부여된다.
즉, 부서번호 10인 사원들 중, 봉급이 7000으로 동일한 5명이 있다면 다섯명은 모두 동일 순위(EX. 3)를 부여받고
다음 순위는 3 + 5인 8번이 된다.

또 다른 순위 분석함수인 DENSE_RANK와 비교해보자.
예시04 - DENSE_RANK
-- 사원번호, 사원의 이름, 부서번호, 봉급, 부서별로 급여가 많은 사원부터 순위를 출력하자.

SELECT EMPNO, ENAME, DEPTNO, SAL,
DENSE_RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) "순  위"
FROM C##SCOTT.EMP;
출력결과

     EMPNO ENAME          DEPTNO        SAL       순  위
---------- ---------- ---------- ---------- ----------
      7839 KING               10       5000          1
      7782 CLARK              10       2450          2
      7934 MILLER             10       1300          3
      7788 SCOTT              20       3000          1 -- 부서번호 20 내에서 봉급이 같음
      7902 FORD               20       3000          1 -- 부서번호 20 내에서 봉급이 같음
      7566 JONES              20       2975          2 -- 다음 순위는 무조건 한단계 다음 순위인 2번으로 책정됨
      7876 ADAMS              20       1100          3
      7369 SMITH              20        800          4
      7698 BLAKE              30       2850          1
      7499 ALLEN              30       1600          2
      7844 TURNER             30       1500          3
      7654 MARTIN             30       1250          4
      7521 WARD               30       1250          4
      7900 JAMES              30        950          5
예시03과 같이, DESC옵션을 주어 파티션 내에서 봉급을 내림차순으로 정렬했다.
DENSE-RANK의 경우 동일 봉급일 때, 동일 순위를 부여하고 그 다음 순위는 순위 + 1 의 순위가 부여된다.
즉, 부서번호 10인 사원들 중, 봉급이 7000으로 동일한 5명이 있다면 다섯명은 모두 동일 순위(EX. 3)를 부여받고
다음 순위는 3 + 1인 4번이 된다.



자바스크립트 호이스팅 Hoisting
 

호이스팅이란 변수나 함수가 어디서 선언이 되든지간에 

최상단에 위치하게 되어 동일 스코프 에서는 어디서든 참조 할수 있다는 것을 말한다.

코드로 설명 하면 아주 간단하니 바로 밑에 예제 보자

 

 

addString("가나다", "라마바사");


function addString(str1, str2)
{
    return str1 + str2;
}
 

결과 : 가나다라마바사

 


선언 된적이 없는 것을 참조하려고 할때

addString을 실행 시점에  function addString이 선언되어있지 않으므로 

에러가 나는 상황이지만 정상 동작 한다.  addString 함수를 상단으로 올려서 참조 할수 있도록 해줬다. 

이를 호이스팅 이라고 한다.

위에서 함수 선언은 동시에 초기화가 이루어 지기 때문에 참조 뿐만 아니라 실행도 가능하다.


아래와 같은 함수표현식 스타일은 어떨까?

 

addString("123123", "456456");

var addString = function (str1, str2)
{
     return str1 + str2;
}
 

addString을 함수표현식 스타일로 선언해도 호이스팅 되며, 실행이 될까??

 

내가 구매한 책에서는 불가능 하다고 되어 있었다.

( 역시 IE11 으로 테스트시 에러가 발생한다. )

 


 

 

크롬에서도 실행시에 결과값을 undefined로 예상 했었다.

 

하지만.. Chrome 버전 95.0.4638.54(공식 빌드)에서는 정상적으로 동작한다. 

 


 

이건.. 브라우저와 javascript 엔진 버전상의 처리 방식이 다르므로, 사용시 유의 해야겠다.

 

 

 

실행이 안되는 케이스는 어떤것이 있을까??

 

함수 표현식으로 사용하되 var를 쓰지 않고 let, const를 사용하면 실행이 안된다.

 

addString("123123", "456456");

let addString = function (str1, str2)
{
     return str1 + str2;
}
 

addString("123123", "456456");

const addString = function (str1, str2)
{
     return str1 + str2;
}


##### var const let #####
Var
ES6의 등장 이전에는 문제점들이 있음에도 불구하고 var로 변수를 선언하는 것이 지배적이었는데요. 따라서 새로운 변수 선언 방식이 등장할 수밖에 없었습니다. 우선, 문제점에 대해 논의하기 전에 var 자체에 대해 더 이해해봅시다.

Scope of var
범위는 기본적으로 변수를 사용할 수 있는 위치를 의미합니다. var 선언은 전역 범위 혹은 함수 범위로 지정됩니다.


var변수가 함수 외부에서 선언될 때의 범위는 전역입니다. 즉, 함수 블록 외부에서 var를 사용하여 선언된 모든 변수를 전체 윈도우 상에서 사용할 수 있는 것이죠.


var가 함수 내에서 선언될 때는 함수 범위로 지정됩니다. 즉, 해당 함수 내에서만 사용하고 접근할 수 있습니다.


자세한 이해를 돕기위해 아래의 예제를 살펴봅시다.

    var greeter = "hey hi";
    
    function newFunction() {
        var hello = "hello";
    }
여기서 hello가 함수 범위인 반면에, greeter는 함수 밖에 존재하므로 전역 범위를 가지게 됩니다.

    var tester = "hey hi";
    
    function newFunction() {
        var hello = "hello";
    }
    console.log(hello); // error: hello is not defined
hello는 newFunction() 함수 밖에서 사용할 수 없기 때문에 에러가 발생하게 됩니다.

var 변수는 재선언되고, 업데이트될 수 있습니다.
같은 범위 내에서라면 아래의 두 경우와 같이 수정이 가능하며 에러가 발생하지 않습니다.

    var greeter = "hey hi";
    var greeter = "say Hello instead";
    var greeter = "hey hi";
    greeter = "say Hello instead";
var의 호이스팅
호이스팅이란 변수와 함수 선언이 맨 위로 이동되는 자바스크립트 매커니즘인데요. 아래와 같이 코드를 짜면:

    console.log (greeter);
    var greeter = "say hello"
자바스크립트는 다음과 같이 해석하기 때문에:

    var greeter;
    console.log(greeter); // greeter is undefined
    greeter = "say hello"
var변수는 범위 내에서 맨 위로 올려지고, 값은 undefined(정의되지 않음)으로 초기화됩니다.

var의 문제점
아래의 예제를 토대로 var를 사용할 시 따라오는 취약점에 대해 이야기해보겠습니다.

    var greeter = "hey hi";
    var times = 4;

    if (times > 3) {
        var greeter = "say Hello instead"; 
    }
    
    console.log(greeter) // "say Hello instead"
time > 3가 true를 반환하기 때문에 greeter는 "say Hello instead"로 재정의됩니다. 의도적으로 재정의한 것이라면 괜찮겠지만, 변수 greeter가 이미 정의되어 있다는 사실을 인식하지 못한 경우에는 문제가 됩니다.

만약 코드의 다른 부분에서 greeter를 사용한 적이 있다면 뜻밖의 출력 결과에 놀랄 수 있습니다. 그리고 많은 버그를 발생시킬 수 있기 때문에 let과 const가 필요하게 된 것이죠.

Let
var 선언에 대한 개선을 반영한 let이 현재 변수 선언에서 선호되고 있습니다. 방금 다뤘던 var의 문제점을 해결할 수 있었던 이유에 대해 살펴봅시다.

블록 범위 let
블록은 {}로 바인딩된 코드 청크인데요. 하나의 블록은 중괄호 속에서 존재하며, 중괄호 안에 있는 것은 모두 블록 범위입니다.

let으로 선언된 변수는 해당 블록 내에서만 사용가능합니다. 예를 들어 설명하자면:

   let greeting = "say Hi";
   let times = 4;

   if (times > 3) {
        let hello = "say Hello instead";
        console.log(hello);// "say Hello instead"
    }
   console.log(hello) // hello is not defined
중괄호로 감싸진 hello 변수가 정의된 블록 외부에서 helllo를 사용했더니 에러가 반환되는 것을 확인할 수 있습니다. let 변수는 블록 범위이기 때문이죠.

let은 업데이트될 수 있지만, 재선언은 불가능하다.
var와 마찬가지로 let으로 선언된 변수는 해당 범위 내에서 업데이트될 수 있습니다. 하지만, var와 달리 let 변수는 범위 내에서 다시 선언할 수 없습니다. 아래의 기능이 작동하는 동안:

    let greeting = "say Hi";
    greeting = "say Hello instead";
이와 같은 에러가 발생합니다:

    let greeting = "say Hi";
    let greeting = "say Hello instead"; // error: Identifier 'greeting' has already been declared
그러나 동일한 변수가 다른 범위 내에서 정의된다면, 에러는 더 이상 발생하지 않습니다.

    let greeting = "say Hi";
    if (true) {
        let greeting = "say Hello instead";
        console.log(greeting); // "say Hello instead"
    }
    console.log(greeting); // "say Hi"
오류가 없는 이유는 무엇일까요? 두 예제가 서로 다른 범위를 가지므로 서로 다른 변수로 취급되기 때문입니다. 따라서 var보다 let이 더 나은 선택이 될 수 있는 것이죠. let을 사용하는 경우라면, 변수가 범위 내에서만 존재하기 때문에 이전에 이미 사용한 적이 있는 변수 명에 대해서 더 이상 신경쓰지 않아도 좋습니다.또한, 범위 내에서 동일한 변수를 두 번 이상 선언할 수 없기 때문에 앞서 설명한 var의 문제가 발생하지 않습니다.

let의 호이스팅
var와 마찬가지로 let 선언은 맨 위로 끌어올려집니다. undefined(정의되지 않음)으로 초기화되는 var와 다르게 let의 키워드는 초기화되지 않습니다. 선언 이전에 let 변수를 사용하려고 시도한다면 Reference Error(참조 오류)가 발생할 것입니다.

Const
const로 선언된 변수는 일정한 상수 값을 유지합니다. const 선언은 let 선언과 몇 가지 유사점을 공유합니다.

블록 범위 const
let 선언처럼 const 선언도 선언된 블록 범위 내에서만 접근 가능합니다.

const는 업데이트도, 재선언도 불가능하다
const로 선언된 변수의 값이 해당 범위 내에서 동일하게 유지됨을 의미합니다. 업데이트하거나 다시 선언할 수가 없는 것이죠. const로 변수를 선언한 경우에는 다음과 같은 두 작업을 수행할 수 없습니다:

    const greeting = "say Hi";
    greeting = "say Hello instead";// error: Assignment to constant variable. 
    const greeting = "say Hi";
    const greeting = "say Hello instead";// error: Identifier 'greeting' has already been declared
따라서 모든 const 선언은 선언하는 당시에 초기화되어야 합니다.

개체의 경우는 다소 다른 점이 있는데요. const 개체는 업데이트할 수 없지만, 개체의 '속성'은 업데이트할 수 있습니다. const 객체를 다음과 같이 선언했다면:

    const greeting = {
        message: "say Hi",
        times: 4
    }
아래와 같은 작업은 불가능하지만:

    greeting = {
        words: "Hello",
        number: "five"
    } // error:  Assignment to constant variable.
다음의 코드는 가능합니다:

    greeting.message = "say Hello instead";
오류를 반환하지 않고 greeting.message 값이 업데이트됩니다.

const의 호이스팅
let과 마찬가지로 const 선언도 맨 위로 끌어올려지지만, 초기화되지는 않습니다.

세 가지 변수 선언법의 차이점에 대해서 총정리하자면:

var 선언은 전역 범위 또는 함수 범위이며, let과 const는 블록 범위이다.
var 변수는 범위 내에서 업데이트 및 재선언할 수 있다. let 변수는 업데이트할 수 있지만, 재선언은 할 수 없다. const 변수는 업데이트와 재선언 둘 다 불가능하다.
세 가지 모두 최상위로 호이스팅된다. 하지만 var 변수만 undefined(정의되지 않음)으로 초기화되고 let과 const 변수는 초기화되지 않는다.
var와 let은 초기화하지 않은 상태에서 선언할 수 있지만, const는 선언 중에 초기화해야한다.
