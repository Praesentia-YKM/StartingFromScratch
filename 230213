# **JSON**

쿼리파라미터나 form처럼 key=value의 형식으로 데이터를 전송했듯이

JSON 또한 데이터 포맷으로써 JSON 형식으로 데이터를 포맷하여 서버에 전송하게 된다

```xml
content-type : application/json
message body : {"username" : "kim" , "age" : 20}

//출력 예시
System.out.println("messageBody = " + messageBody);
messageBody = {"username" : "kim" , "age" : 20}
```

여기서의 핵심은 결국 JSON 또한 데이터 포맷일 뿐이라 위의 예시 같은 형식으로 데이터를 보낼 뿐이지

결국엔 텍스트로 서버에 전송이 된다는 것이다

하지만 JSON의 라이브러리를 사용하면 이 텍스트를 객체처럼 활용할 수 있다는 것이 바로 JSON의 장점이다

이러한 장점을 활용하여 주로 HTTP API에서 데이터를 주고받을 때 사용한다

JSON parsing(변환)을 위해 객체를 하나 생성하였다

```java
@Getter @Setter
public class JsonData {

    private String username;
    private int age;

}
```

JSON의 라이브러리인 jackson을 활용하여 메시지 바디에 JSON 형식으로 온 데이터를 JsonData 형식으로 출력하게 되면

```java
@WebServlet(name = "requestBodyJsonServlet", urlPatterns = "/request-body-json")
public class RequestBodyJsonServlet extends HttpServlet {

// JSON 라이브러리인 jackson으로 객체 선언private ObjectMapper objectMapper = new ObjectMapper();

@Override
protected void service(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {

//Servlet의 inputStream으로 messageBody를 받아올 수 있다
    ServletInputStream inputStream = request.getInputStream();
    String messageBody = StreamUtils.copyToString(inputStream,StandardCharsets.UTF_8);

//readvalue를 사용하여 메시지 바디를 어떠한 형태의 객체에 담을지 작성
    JsonData jsonData = objectMapper.readValue(messageBody, JsonData.class);

    System.out.println("jsonData.username = " + jsonData.getUsername());
    System.out.println("jsonData.age = " + jsonData.getAge());

    }
}

//출력 예시
jsonData.getUsername() = kim
jsonData.getAge() = 20
```

객체를 통하여 Json 데이터 포맷으로 전송받은 메시지바디안의 데이터가 출력이 되는 것을 확인할 수 있었다

## **핵심정리**

클라이언트가 서버에 요청 데이터를 보내는 방법은 3가지로 나뉜다

**1. HTTP GET을 활용한 쿼리파라미터를 URL을 통해 전송**

주로 검색, 필터, 페이징 등에서 사용한다

**2.HTTP POST를 활용한 HTML Form을 메시지 바디에 담아 전송**

주로 회원 가입, 상품 주문 등에서 사용한다

**3. 메시지 바디에 JSON 데이터 포맷으로 담아 전송**

주로 HTTP API에 사용한다

이렇게 세가지의 방식이면 모든 요청 데이터를 서버에서 전송받을 수 있다

### JSON과 XML의 공통점

JSON과 XML은 다음과 같은 공통점을 가지고 있습니다.

1. 둘 다 데이터를 저장하고 전달하기 위해 고안되었습니다.

2. 둘 다 기계뿐만 아니라 사람도 쉽게 읽을 수 있습니다.

3. 둘 다 계층적인 데이터 구조를 가집니다.

4. 둘 다 다양한 프로그래밍 언어에 의해 파싱될 수 있습니다.

5. 둘 다 XMLHttpRequest 객체를 이용하여 서버로부터 데이터를 전송받을 수 있습니다.

### JSON과 XML의 차이점

하지만 JSON과 XML은 다음과 같은 차이점도 가지고 있습니다.

1. JSON은 종료 태그를 사용하지 않습니다.

2. JSON의 구문이 XML의 구문보다 더 짧습니다.

3. JSON 데이터가 XML 데이터보다 더 빨리 읽고 쓸 수 있습니다.

4. XML은 배열을 사용할 수 없지만, JSON은 배열을 사용할 수 있습니다.

5. XML은 XML 파서로 파싱되며, JSON은 자바스크립트 표준 함수인 eval() 함수로 파싱됩니다.

### XML 예제

```sql
<dog>
    <name>식빵</name>
    <family>웰시코기<family>
    <age>1</age>
    <weight>2.14</weight>
</dog>
```

위의 예제를 JSON 형태의 데이터로 바꾸면 다음과 같습니다.

### JSON 예제

```sql
{
    "name": "식빵",
    "family": "웰시코기",
    "age": 1,
    "weight": 2.14
}
```

---

### JSON의 사용 범위

XML 문서는 XML DOM(Document Object Model)을 이용하여 해당 문서에 접근합니다.

하지만 JSON은 문자열을 전송받은 후에 해당 문자열을 바로 파싱하므로, XML보다 더욱 빠른 처리 속도를 보여줍니다.

따라서 HTML과 자바스크립트가 연동되어 빠른 응답이 필요한 웹 환경에서 많이 사용되고 있습니다.

하지만 JSON은 전송받은 데이터의 무결성을 사용자가 직접 검증해야 합니다.

따라서 데이터의 검증이 필요한 곳에서는 스키마를 사용하여 데이터의 무결성을 검증할 수 있는 XML이 아직도 많이 사용되고 있습니다.
